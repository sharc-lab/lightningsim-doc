// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GIN_compute_graphs_global_mean_pooling_Pipeline_global_mean_pooling_main_VITIS_LOOP_53_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        embeddings_0_0_0_0_0_dout,
        embeddings_0_0_0_0_0_empty_n,
        embeddings_0_0_0_0_0_read,
        embeddings_0_0_0_0_01_dout,
        embeddings_0_0_0_0_01_empty_n,
        embeddings_0_0_0_0_01_read,
        embeddings_0_0_0_0_012_dout,
        embeddings_0_0_0_0_012_empty_n,
        embeddings_0_0_0_0_012_read,
        embeddings_0_0_0_0_013_dout,
        embeddings_0_0_0_0_013_empty_n,
        embeddings_0_0_0_0_013_read,
        bound,
        sums_V_0_address0,
        sums_V_0_ce0,
        sums_V_0_we0,
        sums_V_0_d0,
        sums_V_0_address1,
        sums_V_0_ce1,
        sums_V_0_q1,
        sums_V_1_address0,
        sums_V_1_ce0,
        sums_V_1_we0,
        sums_V_1_d0,
        sums_V_1_address1,
        sums_V_1_ce1,
        sums_V_1_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] embeddings_0_0_0_0_0_dout;
input   embeddings_0_0_0_0_0_empty_n;
output   embeddings_0_0_0_0_0_read;
input  [15:0] embeddings_0_0_0_0_01_dout;
input   embeddings_0_0_0_0_01_empty_n;
output   embeddings_0_0_0_0_01_read;
input  [15:0] embeddings_0_0_0_0_012_dout;
input   embeddings_0_0_0_0_012_empty_n;
output   embeddings_0_0_0_0_012_read;
input  [15:0] embeddings_0_0_0_0_013_dout;
input   embeddings_0_0_0_0_013_empty_n;
output   embeddings_0_0_0_0_013_read;
input  [37:0] bound;
output  [5:0] sums_V_0_address0;
output   sums_V_0_ce0;
output   sums_V_0_we0;
output  [15:0] sums_V_0_d0;
output  [5:0] sums_V_0_address1;
output   sums_V_0_ce1;
input  [15:0] sums_V_0_q1;
output  [5:0] sums_V_1_address0;
output   sums_V_1_ce0;
output   sums_V_1_we0;
output  [15:0] sums_V_1_d0;
output  [5:0] sums_V_1_address1;
output   sums_V_1_ce1;
input  [15:0] sums_V_1_q1;

reg ap_idle;
reg embeddings_0_0_0_0_0_read;
reg embeddings_0_0_0_0_01_read;
reg embeddings_0_0_0_0_012_read;
reg embeddings_0_0_0_0_013_read;
reg sums_V_0_ce0;
reg sums_V_0_we0;
reg sums_V_0_ce1;
reg sums_V_1_ce0;
reg sums_V_1_we0;
reg sums_V_1_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    io_acc_block_signal_op32;
wire    io_acc_block_signal_op35;
reg    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln50_fu_152_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    embeddings_0_0_0_0_0_blk_n;
wire    ap_block_pp0_stage0;
reg    embeddings_0_0_0_0_01_blk_n;
reg    embeddings_0_0_0_0_012_blk_n;
reg    embeddings_0_0_0_0_013_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] select_ln50_1_fu_206_p3;
reg   [0:0] select_ln50_1_reg_336;
wire   [15:0] h_graph_el_V_8_fu_238_p2;
reg   [15:0] h_graph_el_V_8_reg_342;
reg   [5:0] sums_V_0_addr_reg_348;
wire   [15:0] h_graph_el_V_11_fu_260_p2;
reg   [15:0] h_graph_el_V_11_reg_354;
reg   [5:0] sums_V_1_addr_reg_360;
wire   [63:0] zext_ln79_fu_254_p1;
reg   [6:0] dim_fu_66;
wire   [6:0] add_ln53_fu_266_p2;
wire    ap_loop_init;
reg   [30:0] i_fu_70;
wire   [30:0] select_ln50_2_fu_214_p3;
reg   [37:0] indvar_flatten_fu_74;
wire   [37:0] add_ln50_fu_157_p2;
wire   [0:0] icmp_ln53_fu_180_p2;
wire   [30:0] i_7_fu_174_p2;
wire   [0:0] cmp2021_fu_200_p2;
wire   [0:0] cmp20_mid1_fu_194_p2;
wire   [6:0] select_ln50_fu_186_p3;
wire   [5:0] lshr_ln_fu_244_p4;
wire   [15:0] h_graph_el_V_9_fu_282_p2;
wire   [15:0] h_graph_el_V_12_fu_294_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

GIN_compute_graphs_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            dim_fu_66 <= 7'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            dim_fu_66 <= add_ln53_fu_266_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            i_fu_70 <= 31'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            i_fu_70 <= select_ln50_2_fu_214_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_74 <= 38'd0;
        end else if (((icmp_ln50_fu_152_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_74 <= add_ln50_fu_157_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        h_graph_el_V_11_reg_354 <= h_graph_el_V_11_fu_260_p2;
        h_graph_el_V_8_reg_342 <= h_graph_el_V_8_fu_238_p2;
        select_ln50_1_reg_336 <= select_ln50_1_fu_206_p3;
        sums_V_0_addr_reg_348 <= zext_ln79_fu_254_p1;
        sums_V_1_addr_reg_360 <= zext_ln79_fu_254_p1;
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_152_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        embeddings_0_0_0_0_012_blk_n = embeddings_0_0_0_0_012_empty_n;
    end else begin
        embeddings_0_0_0_0_012_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        embeddings_0_0_0_0_012_read = 1'b1;
    end else begin
        embeddings_0_0_0_0_012_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        embeddings_0_0_0_0_013_blk_n = embeddings_0_0_0_0_013_empty_n;
    end else begin
        embeddings_0_0_0_0_013_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        embeddings_0_0_0_0_013_read = 1'b1;
    end else begin
        embeddings_0_0_0_0_013_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        embeddings_0_0_0_0_01_blk_n = embeddings_0_0_0_0_01_empty_n;
    end else begin
        embeddings_0_0_0_0_01_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        embeddings_0_0_0_0_01_read = 1'b1;
    end else begin
        embeddings_0_0_0_0_01_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        embeddings_0_0_0_0_0_blk_n = embeddings_0_0_0_0_0_empty_n;
    end else begin
        embeddings_0_0_0_0_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        embeddings_0_0_0_0_0_read = 1'b1;
    end else begin
        embeddings_0_0_0_0_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        sums_V_0_ce0 = 1'b1;
    end else begin
        sums_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sums_V_0_ce1 = 1'b1;
    end else begin
        sums_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        sums_V_0_we0 = 1'b1;
    end else begin
        sums_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        sums_V_1_ce0 = 1'b1;
    end else begin
        sums_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sums_V_1_ce1 = 1'b1;
    end else begin
        sums_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        sums_V_1_we0 = 1'b1;
    end else begin
        sums_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln50_fu_157_p2 = (indvar_flatten_fu_74 + 38'd1);

assign add_ln53_fu_266_p2 = (select_ln50_fu_186_p3 + 7'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & ((io_acc_block_signal_op35 == 1'b0) | (io_acc_block_signal_op32 == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & ((io_acc_block_signal_op35 == 1'b0) | (io_acc_block_signal_op32 == 1'b0)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((io_acc_block_signal_op35 == 1'b0) | (io_acc_block_signal_op32 == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign cmp2021_fu_200_p2 = ((i_fu_70 != 31'd0) ? 1'b1 : 1'b0);

assign cmp20_mid1_fu_194_p2 = ((i_7_fu_174_p2 != 31'd0) ? 1'b1 : 1'b0);

assign h_graph_el_V_11_fu_260_p2 = (embeddings_0_0_0_0_013_dout + embeddings_0_0_0_0_01_dout);

assign h_graph_el_V_12_fu_294_p2 = (sums_V_1_q1 + h_graph_el_V_11_reg_354);

assign h_graph_el_V_8_fu_238_p2 = (embeddings_0_0_0_0_012_dout + embeddings_0_0_0_0_0_dout);

assign h_graph_el_V_9_fu_282_p2 = (sums_V_0_q1 + h_graph_el_V_8_reg_342);

assign i_7_fu_174_p2 = (i_fu_70 + 31'd1);

assign icmp_ln50_fu_152_p2 = ((indvar_flatten_fu_74 == bound) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_180_p2 = ((dim_fu_66 < 7'd100) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op32 = (embeddings_0_0_0_0_0_empty_n & embeddings_0_0_0_0_01_empty_n);

assign io_acc_block_signal_op35 = (embeddings_0_0_0_0_013_empty_n & embeddings_0_0_0_0_012_empty_n);

assign lshr_ln_fu_244_p4 = {{select_ln50_fu_186_p3[6:1]}};

assign select_ln50_1_fu_206_p3 = ((icmp_ln53_fu_180_p2[0:0] == 1'b1) ? cmp2021_fu_200_p2 : cmp20_mid1_fu_194_p2);

assign select_ln50_2_fu_214_p3 = ((icmp_ln53_fu_180_p2[0:0] == 1'b1) ? i_fu_70 : i_7_fu_174_p2);

assign select_ln50_fu_186_p3 = ((icmp_ln53_fu_180_p2[0:0] == 1'b1) ? dim_fu_66 : 7'd0);

assign sums_V_0_address0 = sums_V_0_addr_reg_348;

assign sums_V_0_address1 = zext_ln79_fu_254_p1;

assign sums_V_0_d0 = ((select_ln50_1_reg_336[0:0] == 1'b1) ? h_graph_el_V_9_fu_282_p2 : h_graph_el_V_8_reg_342);

assign sums_V_1_address0 = sums_V_1_addr_reg_360;

assign sums_V_1_address1 = zext_ln79_fu_254_p1;

assign sums_V_1_d0 = ((select_ln50_1_reg_336[0:0] == 1'b1) ? h_graph_el_V_12_fu_294_p2 : h_graph_el_V_11_reg_354);

assign zext_ln79_fu_254_p1 = lshr_ln_fu_244_p4;

endmodule //GIN_compute_graphs_global_mean_pooling_Pipeline_global_mean_pooling_main_VITIS_LOOP_53_1
