-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GIN_compute_graphs_global_mean_pooling_Pipeline_global_mean_pooling_main_VITIS_LOOP_53_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    embeddings_0_0_0_0_0_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    embeddings_0_0_0_0_0_empty_n : IN STD_LOGIC;
    embeddings_0_0_0_0_0_read : OUT STD_LOGIC;
    embeddings_0_0_0_0_01_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    embeddings_0_0_0_0_01_empty_n : IN STD_LOGIC;
    embeddings_0_0_0_0_01_read : OUT STD_LOGIC;
    embeddings_0_0_0_0_012_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    embeddings_0_0_0_0_012_empty_n : IN STD_LOGIC;
    embeddings_0_0_0_0_012_read : OUT STD_LOGIC;
    embeddings_0_0_0_0_013_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    embeddings_0_0_0_0_013_empty_n : IN STD_LOGIC;
    embeddings_0_0_0_0_013_read : OUT STD_LOGIC;
    bound : IN STD_LOGIC_VECTOR (37 downto 0);
    sums_V_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sums_V_0_ce0 : OUT STD_LOGIC;
    sums_V_0_we0 : OUT STD_LOGIC;
    sums_V_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    sums_V_0_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sums_V_0_ce1 : OUT STD_LOGIC;
    sums_V_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    sums_V_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sums_V_1_ce0 : OUT STD_LOGIC;
    sums_V_1_we0 : OUT STD_LOGIC;
    sums_V_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    sums_V_1_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sums_V_1_ce1 : OUT STD_LOGIC;
    sums_V_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of GIN_compute_graphs_global_mean_pooling_Pipeline_global_mean_pooling_main_VITIS_LOOP_53_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv38_1 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal io_acc_block_signal_op32 : STD_LOGIC;
    signal io_acc_block_signal_op35 : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln50_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal embeddings_0_0_0_0_0_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal embeddings_0_0_0_0_01_blk_n : STD_LOGIC;
    signal embeddings_0_0_0_0_012_blk_n : STD_LOGIC;
    signal embeddings_0_0_0_0_013_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln50_1_fu_206_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_1_reg_336 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_graph_el_V_8_fu_238_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_graph_el_V_8_reg_342 : STD_LOGIC_VECTOR (15 downto 0);
    signal sums_V_0_addr_reg_348 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_graph_el_V_11_fu_260_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_graph_el_V_11_reg_354 : STD_LOGIC_VECTOR (15 downto 0);
    signal sums_V_1_addr_reg_360 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln79_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dim_fu_66 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln53_fu_266_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_70 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln50_2_fu_214_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_fu_74 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln50_fu_157_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal icmp_ln53_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_7_fu_174_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal cmp2021_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp20_mid1_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_fu_186_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln_fu_244_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_graph_el_V_9_fu_282_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_graph_el_V_12_fu_294_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component GIN_compute_graphs_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component GIN_compute_graphs_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    dim_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    dim_fu_66 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    dim_fu_66 <= add_ln53_fu_266_p2;
                end if;
            end if; 
        end if;
    end process;

    i_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    i_fu_70 <= ap_const_lv31_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    i_fu_70 <= select_ln50_2_fu_214_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_74 <= ap_const_lv38_0;
                elsif (((icmp_ln50_fu_152_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_74 <= add_ln50_fu_157_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                h_graph_el_V_11_reg_354 <= h_graph_el_V_11_fu_260_p2;
                h_graph_el_V_8_reg_342 <= h_graph_el_V_8_fu_238_p2;
                select_ln50_1_reg_336 <= select_ln50_1_fu_206_p3;
                sums_V_0_addr_reg_348 <= zext_ln79_fu_254_p1(6 - 1 downto 0);
                sums_V_1_addr_reg_360 <= zext_ln79_fu_254_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln50_fu_157_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_74) + unsigned(ap_const_lv38_1));
    add_ln53_fu_266_p2 <= std_logic_vector(unsigned(select_ln50_fu_186_p3) + unsigned(ap_const_lv7_2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, io_acc_block_signal_op32, io_acc_block_signal_op35)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, io_acc_block_signal_op32, io_acc_block_signal_op35)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter2_assign_proc : process(io_acc_block_signal_op32, io_acc_block_signal_op35)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln50_fu_152_p2)
    begin
        if (((icmp_ln50_fu_152_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    cmp2021_fu_200_p2 <= "0" when (i_fu_70 = ap_const_lv31_0) else "1";
    cmp20_mid1_fu_194_p2 <= "0" when (i_7_fu_174_p2 = ap_const_lv31_0) else "1";

    embeddings_0_0_0_0_012_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, embeddings_0_0_0_0_012_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            embeddings_0_0_0_0_012_blk_n <= embeddings_0_0_0_0_012_empty_n;
        else 
            embeddings_0_0_0_0_012_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    embeddings_0_0_0_0_012_read_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            embeddings_0_0_0_0_012_read <= ap_const_logic_1;
        else 
            embeddings_0_0_0_0_012_read <= ap_const_logic_0;
        end if; 
    end process;


    embeddings_0_0_0_0_013_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, embeddings_0_0_0_0_013_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            embeddings_0_0_0_0_013_blk_n <= embeddings_0_0_0_0_013_empty_n;
        else 
            embeddings_0_0_0_0_013_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    embeddings_0_0_0_0_013_read_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            embeddings_0_0_0_0_013_read <= ap_const_logic_1;
        else 
            embeddings_0_0_0_0_013_read <= ap_const_logic_0;
        end if; 
    end process;


    embeddings_0_0_0_0_01_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, embeddings_0_0_0_0_01_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            embeddings_0_0_0_0_01_blk_n <= embeddings_0_0_0_0_01_empty_n;
        else 
            embeddings_0_0_0_0_01_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    embeddings_0_0_0_0_01_read_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            embeddings_0_0_0_0_01_read <= ap_const_logic_1;
        else 
            embeddings_0_0_0_0_01_read <= ap_const_logic_0;
        end if; 
    end process;


    embeddings_0_0_0_0_0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, embeddings_0_0_0_0_0_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            embeddings_0_0_0_0_0_blk_n <= embeddings_0_0_0_0_0_empty_n;
        else 
            embeddings_0_0_0_0_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    embeddings_0_0_0_0_0_read_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            embeddings_0_0_0_0_0_read <= ap_const_logic_1;
        else 
            embeddings_0_0_0_0_0_read <= ap_const_logic_0;
        end if; 
    end process;

    h_graph_el_V_11_fu_260_p2 <= std_logic_vector(unsigned(embeddings_0_0_0_0_013_dout) + unsigned(embeddings_0_0_0_0_01_dout));
    h_graph_el_V_12_fu_294_p2 <= std_logic_vector(unsigned(sums_V_1_q1) + unsigned(h_graph_el_V_11_reg_354));
    h_graph_el_V_8_fu_238_p2 <= std_logic_vector(unsigned(embeddings_0_0_0_0_012_dout) + unsigned(embeddings_0_0_0_0_0_dout));
    h_graph_el_V_9_fu_282_p2 <= std_logic_vector(unsigned(sums_V_0_q1) + unsigned(h_graph_el_V_8_reg_342));
    i_7_fu_174_p2 <= std_logic_vector(unsigned(i_fu_70) + unsigned(ap_const_lv31_1));
    icmp_ln50_fu_152_p2 <= "1" when (indvar_flatten_fu_74 = bound) else "0";
    icmp_ln53_fu_180_p2 <= "1" when (unsigned(dim_fu_66) < unsigned(ap_const_lv7_64)) else "0";
    io_acc_block_signal_op32 <= (embeddings_0_0_0_0_0_empty_n and embeddings_0_0_0_0_01_empty_n);
    io_acc_block_signal_op35 <= (embeddings_0_0_0_0_013_empty_n and embeddings_0_0_0_0_012_empty_n);
    lshr_ln_fu_244_p4 <= select_ln50_fu_186_p3(6 downto 1);
    select_ln50_1_fu_206_p3 <= 
        cmp2021_fu_200_p2 when (icmp_ln53_fu_180_p2(0) = '1') else 
        cmp20_mid1_fu_194_p2;
    select_ln50_2_fu_214_p3 <= 
        i_fu_70 when (icmp_ln53_fu_180_p2(0) = '1') else 
        i_7_fu_174_p2;
    select_ln50_fu_186_p3 <= 
        dim_fu_66 when (icmp_ln53_fu_180_p2(0) = '1') else 
        ap_const_lv7_0;
    sums_V_0_address0 <= sums_V_0_addr_reg_348;
    sums_V_0_address1 <= zext_ln79_fu_254_p1(6 - 1 downto 0);

    sums_V_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            sums_V_0_ce0 <= ap_const_logic_1;
        else 
            sums_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sums_V_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            sums_V_0_ce1 <= ap_const_logic_1;
        else 
            sums_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sums_V_0_d0 <= 
        h_graph_el_V_9_fu_282_p2 when (select_ln50_1_reg_336(0) = '1') else 
        h_graph_el_V_8_reg_342;

    sums_V_0_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            sums_V_0_we0 <= ap_const_logic_1;
        else 
            sums_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sums_V_1_address0 <= sums_V_1_addr_reg_360;
    sums_V_1_address1 <= zext_ln79_fu_254_p1(6 - 1 downto 0);

    sums_V_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            sums_V_1_ce0 <= ap_const_logic_1;
        else 
            sums_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sums_V_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            sums_V_1_ce1 <= ap_const_logic_1;
        else 
            sums_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sums_V_1_d0 <= 
        h_graph_el_V_12_fu_294_p2 when (select_ln50_1_reg_336(0) = '1') else 
        h_graph_el_V_11_reg_354;

    sums_V_1_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            sums_V_1_we0 <= ap_const_logic_1;
        else 
            sums_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln79_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_244_p4),64));
end behav;
