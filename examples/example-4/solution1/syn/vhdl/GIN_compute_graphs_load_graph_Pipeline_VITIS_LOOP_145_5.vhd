-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GIN_compute_graphs_load_graph_Pipeline_VITIS_LOOP_145_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    num_of_nodes : IN STD_LOGIC_VECTOR (30 downto 0);
    neighbor_tables_offsets_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    neighbor_tables_offsets_3_ce0 : OUT STD_LOGIC;
    neighbor_tables_offsets_3_we0 : OUT STD_LOGIC;
    neighbor_tables_offsets_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    neighbor_tables_offsets_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    neighbor_tables_offsets_2_ce0 : OUT STD_LOGIC;
    neighbor_tables_offsets_2_we0 : OUT STD_LOGIC;
    neighbor_tables_offsets_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    neighbor_tables_offsets_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    neighbor_tables_offsets_1_ce0 : OUT STD_LOGIC;
    neighbor_tables_offsets_1_we0 : OUT STD_LOGIC;
    neighbor_tables_offsets_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    neighbor_table_offsets_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    neighbor_table_offsets_ce0 : OUT STD_LOGIC;
    neighbor_table_offsets_we0 : OUT STD_LOGIC;
    neighbor_table_offsets_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    full_pe_degree_tables_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    full_pe_degree_tables_ce0 : OUT STD_LOGIC;
    full_pe_degree_tables_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    neighbor_tables_offsets_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    neighbor_tables_offsets_0_ce0 : OUT STD_LOGIC;
    neighbor_tables_offsets_0_we0 : OUT STD_LOGIC;
    neighbor_tables_offsets_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out_ap_vld : OUT STD_LOGIC;
    p_out1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out1_ap_vld : OUT STD_LOGIC;
    p_out2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out2_ap_vld : OUT STD_LOGIC;
    p_out3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out3_ap_vld : OUT STD_LOGIC;
    pes_per_node_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pes_per_node_ce0 : OUT STD_LOGIC;
    pes_per_node_we0 : OUT STD_LOGIC;
    pes_per_node_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pes_per_node_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pes_per_node_ce1 : OUT STD_LOGIC;
    pes_per_node_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    degree_table_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    degree_table_1_ce0 : OUT STD_LOGIC;
    degree_table_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    degree_tables_1_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    degree_tables_1_0_ce0 : OUT STD_LOGIC;
    degree_tables_1_0_we0 : OUT STD_LOGIC;
    degree_tables_1_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    degree_tables_1_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    degree_tables_1_1_ce0 : OUT STD_LOGIC;
    degree_tables_1_1_we0 : OUT STD_LOGIC;
    degree_tables_1_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    degree_tables_1_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    degree_tables_1_2_ce0 : OUT STD_LOGIC;
    degree_tables_1_2_we0 : OUT STD_LOGIC;
    degree_tables_1_2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    degree_tables_1_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    degree_tables_1_3_ce0 : OUT STD_LOGIC;
    degree_tables_1_3_we0 : OUT STD_LOGIC;
    degree_tables_1_3_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of GIN_compute_graphs_load_graph_Pipeline_VITIS_LOOP_145_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln145_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_reg_1049 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_1049_pp0_iter1_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln145_reg_1056 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln145_reg_1056_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln145_reg_1056_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_cast104_fu_466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast104_reg_1060 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast104_reg_1060_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal degree_reg_1079 : STD_LOGIC_VECTOR (31 downto 0);
    signal degree_j_fu_477_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal degree_j_reg_1084 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln160_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1090 : STD_LOGIC_VECTOR (0 downto 0);
    signal degree_j_1_reg_1094 : STD_LOGIC_VECTOR (31 downto 0);
    signal degree_j_2_reg_1101 : STD_LOGIC_VECTOR (31 downto 0);
    signal degree_j_3_reg_1108 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln160_1_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln137_1_fu_624_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln160_2_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_432_fu_660_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln160_3_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_3_reg_1133 : STD_LOGIC_VECTOR (0 downto 0);
    signal pes_per_node_addr_reg_1137 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_cmp_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_1143 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln168_fu_737_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln168_reg_1148 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal ap_phi_mux_node_pes_V_8_phi_fu_356_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_node_pes_V_8_reg_352 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_node_pes_V_8_reg_352 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter2_node_pes_V_8_reg_352 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_node_pes_V_7_phi_fu_367_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Result_s_fu_606_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_reg_pp0_iter2_node_pes_V_7_reg_364 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln137_fu_569_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_reg_pp0_iter0_node_pes_V_6_reg_373 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_reg_pp0_iter1_node_pes_V_6_reg_373 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_reg_pp0_iter2_node_pes_V_6_reg_373 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_reg_pp0_iter3_node_pes_V_6_reg_373 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_node_pes_V_5_phi_fu_385_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_433_fu_775_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_reg_pp0_iter3_node_pes_V_5_reg_382 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln137_2_fu_770_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln163_fu_541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln163_1_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln163_2_fu_641_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln163_3_fu_690_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln168_fu_723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_addr_reg_fu_110 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal reuse_reg_fu_114 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln168_fu_933_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal acc_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_fu_528_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln158_fu_533_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_359_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln158_1_fu_574_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_360_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln158_2_fu_628_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_361_fu_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln158_3_fu_677_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_138 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln145_fu_460_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal pe_num_of_nodes_fu_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_of_nodes_per_pe_fu_554_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_num_of_nodes_1_fu_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_of_nodes_per_pe_1_fu_600_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_num_of_nodes_2_fu_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_of_nodes_per_pe_2_fu_654_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_num_of_nodes_3_fu_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_of_nodes_per_pe_3_fu_703_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal i_3_cast_fu_517_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln_fu_714_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln7_fu_794_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_362_fu_801_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln168_1_fu_813_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln168_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln168_2_fu_817_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln168_fu_825_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln168_fu_831_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln168_2_fu_847_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln168_1_fu_839_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln168_1_fu_855_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln168_3_fu_821_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln168_4_fu_861_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln168_fu_873_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_879_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln168_5_fu_865_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln168_6_fu_869_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln168_1_fu_897_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln168_fu_903_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln168_fu_909_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal reuse_select_fu_787_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln168_2_fu_915_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln168_3_fu_889_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln168_1_fu_921_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln168_2_fu_927_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_262 : BOOLEAN;
    signal ap_condition_700 : BOOLEAN;
    signal ap_condition_704 : BOOLEAN;
    signal ap_condition_708 : BOOLEAN;
    signal ap_condition_712 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component GIN_compute_graphs_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component GIN_compute_graphs_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    acc_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    acc_fu_118 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_0))) then 
                    acc_fu_118 <= acc_1_fu_528_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_node_pes_V_8_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_262)) then
                if (((icmp_ln160_fu_481_p2 = ap_const_lv1_1) and (icmp_ln145_reg_1056 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_node_pes_V_8_reg_352 <= ap_const_lv1_1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_node_pes_V_8_reg_352 <= ap_phi_reg_pp0_iter1_node_pes_V_8_reg_352;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter3_node_pes_V_6_reg_373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if (((icmp_ln160_2_fu_633_p2 = ap_const_lv1_0) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter3_node_pes_V_6_reg_373 <= zext_ln137_1_fu_624_p1;
                elsif (((icmp_ln160_2_fu_633_p2 = ap_const_lv1_1) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter3_node_pes_V_6_reg_373 <= p_Result_432_fu_660_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter3_node_pes_V_6_reg_373 <= ap_phi_reg_pp0_iter2_node_pes_V_6_reg_373;
                end if;
            end if; 
        end if;
    end process;

    empty_359_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_359_fu_126 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_0))) then 
                    empty_359_fu_126 <= add_ln158_1_fu_574_p2;
                end if;
            end if; 
        end if;
    end process;

    empty_360_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_360_fu_130 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_0))) then 
                    empty_360_fu_130 <= add_ln158_2_fu_628_p2;
                end if;
            end if; 
        end if;
    end process;

    empty_361_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_361_fu_134 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_0))) then 
                    empty_361_fu_134 <= add_ln158_3_fu_677_p2;
                end if;
            end if; 
        end if;
    end process;

    empty_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    empty_fu_122 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_0))) then 
                    empty_fu_122 <= add_ln158_fu_533_p2;
                end if;
            end if; 
        end if;
    end process;

    i_3_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln145_fu_454_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_3_fu_138 <= add_ln145_fu_460_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_3_fu_138 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;

    pe_num_of_nodes_1_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    pe_num_of_nodes_1_fu_146 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_700)) then 
                    pe_num_of_nodes_1_fu_146 <= num_of_nodes_per_pe_1_fu_600_p2;
                end if;
            end if; 
        end if;
    end process;

    pe_num_of_nodes_2_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    pe_num_of_nodes_2_fu_150 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_704)) then 
                    pe_num_of_nodes_2_fu_150 <= num_of_nodes_per_pe_2_fu_654_p2;
                end if;
            end if; 
        end if;
    end process;

    pe_num_of_nodes_3_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    pe_num_of_nodes_3_fu_154 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_708)) then 
                    pe_num_of_nodes_3_fu_154 <= num_of_nodes_per_pe_3_fu_703_p2;
                end if;
            end if; 
        end if;
    end process;

    pe_num_of_nodes_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    pe_num_of_nodes_fu_142 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_712)) then 
                    pe_num_of_nodes_fu_142 <= num_of_nodes_per_pe_fu_554_p2;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    reuse_addr_reg_fu_110 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_0))) then 
                    reuse_addr_reg_fu_110 <= zext_ln168_fu_723_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    reuse_reg_fu_114 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    reuse_reg_fu_114 <= or_ln168_fu_933_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_0))) then
                addr_cmp_reg_1143 <= addr_cmp_fu_731_p2;
                icmp_ln160_3_reg_1133 <= icmp_ln160_3_fu_682_p2;
                pes_per_node_addr_reg_1137 <= zext_ln168_fu_723_p1(8 - 1 downto 0);
                trunc_ln168_reg_1148 <= trunc_ln168_fu_737_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                    i_3_cast104_reg_1060_pp0_iter1_reg(30 downto 0) <= i_3_cast104_reg_1060(30 downto 0);
                i_reg_1049 <= ap_sig_allocacmp_i;
                i_reg_1049_pp0_iter1_reg <= i_reg_1049;
                icmp_ln145_reg_1056 <= icmp_ln145_fu_454_p2;
                icmp_ln145_reg_1056_pp0_iter1_reg <= icmp_ln145_reg_1056;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_node_pes_V_6_reg_373 <= ap_phi_reg_pp0_iter0_node_pes_V_6_reg_373;
                ap_phi_reg_pp0_iter1_node_pes_V_8_reg_352 <= ap_phi_reg_pp0_iter0_node_pes_V_8_reg_352;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_node_pes_V_6_reg_373 <= ap_phi_reg_pp0_iter1_node_pes_V_6_reg_373;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln145_reg_1056 = ap_const_lv1_0))) then
                degree_j_1_reg_1094 <= full_pe_degree_tables_q0(63 downto 32);
                degree_j_2_reg_1101 <= full_pe_degree_tables_q0(95 downto 64);
                degree_j_3_reg_1108 <= full_pe_degree_tables_q0(127 downto 96);
                degree_j_reg_1084 <= degree_j_fu_477_p1;
                degree_reg_1079 <= degree_table_1_q0;
                icmp_ln160_reg_1090 <= icmp_ln160_fu_481_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln145_fu_454_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    i_3_cast104_reg_1060(30 downto 0) <= i_3_cast104_fu_466_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln145_reg_1056_pp0_iter2_reg <= icmp_ln145_reg_1056_pp0_iter1_reg;
            end if;
        end if;
    end process;
    i_3_cast104_reg_1060(63 downto 31) <= "000000000000000000000000000000000";
    i_3_cast104_reg_1060_pp0_iter1_reg(63 downto 31) <= "000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    acc_1_fu_528_p2 <= std_logic_vector(unsigned(degree_reg_1079) + unsigned(acc_fu_118));
    add_ln145_fu_460_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv31_1));
    add_ln158_1_fu_574_p2 <= std_logic_vector(unsigned(degree_j_1_reg_1094) + unsigned(empty_359_fu_126));
    add_ln158_2_fu_628_p2 <= std_logic_vector(unsigned(degree_j_2_reg_1101) + unsigned(empty_360_fu_130));
    add_ln158_3_fu_677_p2 <= std_logic_vector(unsigned(degree_j_3_reg_1108) + unsigned(empty_361_fu_134));
    add_ln158_fu_533_p2 <= std_logic_vector(unsigned(degree_j_reg_1084) + unsigned(empty_fu_122));
    addr_cmp_fu_731_p2 <= "1" when (reuse_addr_reg_fu_110 = zext_ln168_fu_723_p1) else "0";
    and_ln168_1_fu_921_p2 <= (xor_ln168_2_fu_915_p2 and reuse_select_fu_787_p3);
    and_ln168_2_fu_927_p2 <= (select_ln168_3_fu_889_p3 and and_ln168_fu_909_p2);
    and_ln168_fu_909_p2 <= (shl_ln168_1_fu_897_p2 and lshr_ln168_fu_903_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_262_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_262 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_700_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln145_reg_1056_pp0_iter1_reg, icmp_ln160_1_fu_579_p2)
    begin
                ap_condition_700 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln160_1_fu_579_p2 = ap_const_lv1_1) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_704_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln145_reg_1056_pp0_iter1_reg, icmp_ln160_2_fu_633_p2)
    begin
                ap_condition_704 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln160_2_fu_633_p2 = ap_const_lv1_1) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_708_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln145_reg_1056_pp0_iter1_reg, icmp_ln160_3_fu_682_p2)
    begin
                ap_condition_708 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln160_3_fu_682_p2 = ap_const_lv1_1) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_712_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln145_reg_1056_pp0_iter1_reg, icmp_ln160_reg_1090)
    begin
                ap_condition_712 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln160_reg_1090 = ap_const_lv1_1) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln145_fu_454_p2)
    begin
        if (((icmp_ln145_fu_454_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, icmp_ln145_reg_1056_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_node_pes_V_5_phi_fu_385_p4_assign_proc : process(icmp_ln145_reg_1056_pp0_iter2_reg, icmp_ln160_3_reg_1133, p_Result_433_fu_775_p3, ap_phi_reg_pp0_iter3_node_pes_V_5_reg_382, zext_ln137_2_fu_770_p1)
    begin
        if ((icmp_ln145_reg_1056_pp0_iter2_reg = ap_const_lv1_0)) then
            if ((icmp_ln160_3_reg_1133 = ap_const_lv1_0)) then 
                ap_phi_mux_node_pes_V_5_phi_fu_385_p4 <= zext_ln137_2_fu_770_p1;
            elsif ((icmp_ln160_3_reg_1133 = ap_const_lv1_1)) then 
                ap_phi_mux_node_pes_V_5_phi_fu_385_p4 <= p_Result_433_fu_775_p3;
            else 
                ap_phi_mux_node_pes_V_5_phi_fu_385_p4 <= ap_phi_reg_pp0_iter3_node_pes_V_5_reg_382;
            end if;
        else 
            ap_phi_mux_node_pes_V_5_phi_fu_385_p4 <= ap_phi_reg_pp0_iter3_node_pes_V_5_reg_382;
        end if; 
    end process;


    ap_phi_mux_node_pes_V_7_phi_fu_367_p4_assign_proc : process(icmp_ln145_reg_1056_pp0_iter1_reg, icmp_ln160_1_fu_579_p2, p_Result_s_fu_606_p3, ap_phi_reg_pp0_iter2_node_pes_V_7_reg_364, zext_ln137_fu_569_p1)
    begin
        if ((icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_0)) then
            if ((icmp_ln160_1_fu_579_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_node_pes_V_7_phi_fu_367_p4 <= zext_ln137_fu_569_p1;
            elsif ((icmp_ln160_1_fu_579_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_node_pes_V_7_phi_fu_367_p4 <= p_Result_s_fu_606_p3;
            else 
                ap_phi_mux_node_pes_V_7_phi_fu_367_p4 <= ap_phi_reg_pp0_iter2_node_pes_V_7_reg_364;
            end if;
        else 
            ap_phi_mux_node_pes_V_7_phi_fu_367_p4 <= ap_phi_reg_pp0_iter2_node_pes_V_7_reg_364;
        end if; 
    end process;


    ap_phi_mux_node_pes_V_8_phi_fu_356_p4_assign_proc : process(icmp_ln145_reg_1056_pp0_iter1_reg, icmp_ln160_reg_1090, ap_phi_reg_pp0_iter2_node_pes_V_8_reg_352)
    begin
        if (((icmp_ln160_reg_1090 = ap_const_lv1_0) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_node_pes_V_8_phi_fu_356_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_node_pes_V_8_phi_fu_356_p4 <= ap_phi_reg_pp0_iter2_node_pes_V_8_reg_352;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_node_pes_V_6_reg_373 <= "XXX";
    ap_phi_reg_pp0_iter0_node_pes_V_8_reg_352 <= "X";
    ap_phi_reg_pp0_iter2_node_pes_V_7_reg_364 <= "XX";
    ap_phi_reg_pp0_iter3_node_pes_V_5_reg_382 <= "XXXX";

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_3_fu_138)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv31_0;
        else 
            ap_sig_allocacmp_i <= i_3_fu_138;
        end if; 
    end process;

    degree_j_fu_477_p1 <= full_pe_degree_tables_q0(32 - 1 downto 0);
    degree_table_1_address0 <= i_3_cast104_fu_466_p1(9 - 1 downto 0);

    degree_table_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            degree_table_1_ce0 <= ap_const_logic_1;
        else 
            degree_table_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    degree_tables_1_0_address0 <= zext_ln163_fu_541_p1(9 - 1 downto 0);

    degree_tables_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            degree_tables_1_0_ce0 <= ap_const_logic_1;
        else 
            degree_tables_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    degree_tables_1_0_d0 <= (degree_j_reg_1084 & i_3_cast_fu_517_p1);

    degree_tables_1_0_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln145_reg_1056_pp0_iter1_reg, icmp_ln160_reg_1090)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln160_reg_1090 = ap_const_lv1_1) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_0))) then 
            degree_tables_1_0_we0 <= ap_const_logic_1;
        else 
            degree_tables_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    degree_tables_1_1_address0 <= zext_ln163_1_fu_587_p1(9 - 1 downto 0);

    degree_tables_1_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            degree_tables_1_1_ce0 <= ap_const_logic_1;
        else 
            degree_tables_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    degree_tables_1_1_d0 <= (degree_j_1_reg_1094 & i_3_cast_fu_517_p1);

    degree_tables_1_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln145_reg_1056_pp0_iter1_reg, icmp_ln160_1_fu_579_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln160_1_fu_579_p2 = ap_const_lv1_1) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_0))) then 
            degree_tables_1_1_we0 <= ap_const_logic_1;
        else 
            degree_tables_1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    degree_tables_1_2_address0 <= zext_ln163_2_fu_641_p1(9 - 1 downto 0);

    degree_tables_1_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            degree_tables_1_2_ce0 <= ap_const_logic_1;
        else 
            degree_tables_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    degree_tables_1_2_d0 <= (degree_j_2_reg_1101 & i_3_cast_fu_517_p1);

    degree_tables_1_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln145_reg_1056_pp0_iter1_reg, icmp_ln160_2_fu_633_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln160_2_fu_633_p2 = ap_const_lv1_1) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_0))) then 
            degree_tables_1_2_we0 <= ap_const_logic_1;
        else 
            degree_tables_1_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    degree_tables_1_3_address0 <= zext_ln163_3_fu_690_p1(9 - 1 downto 0);

    degree_tables_1_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            degree_tables_1_3_ce0 <= ap_const_logic_1;
        else 
            degree_tables_1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    degree_tables_1_3_d0 <= (degree_j_3_reg_1108 & i_3_cast_fu_517_p1);

    degree_tables_1_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln145_reg_1056_pp0_iter1_reg, icmp_ln160_3_fu_682_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln160_3_fu_682_p2 = ap_const_lv1_1) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_0))) then 
            degree_tables_1_3_we0 <= ap_const_logic_1;
        else 
            degree_tables_1_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_362_fu_801_p2 <= (shl_ln7_fu_794_p3 or ap_const_lv3_3);
    full_pe_degree_tables_address0 <= i_3_cast104_fu_466_p1(9 - 1 downto 0);

    full_pe_degree_tables_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            full_pe_degree_tables_ce0 <= ap_const_logic_1;
        else 
            full_pe_degree_tables_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_3_cast104_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),64));
    i_3_cast_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_1049_pp0_iter1_reg),32));
    icmp_ln145_fu_454_p2 <= "1" when (ap_sig_allocacmp_i = num_of_nodes) else "0";
    icmp_ln160_1_fu_579_p2 <= "1" when (signed(degree_j_1_reg_1094) > signed(ap_const_lv32_0)) else "0";
    icmp_ln160_2_fu_633_p2 <= "1" when (signed(degree_j_2_reg_1101) > signed(ap_const_lv32_0)) else "0";
    icmp_ln160_3_fu_682_p2 <= "1" when (signed(degree_j_3_reg_1108) > signed(ap_const_lv32_0)) else "0";
    icmp_ln160_fu_481_p2 <= "1" when (signed(degree_j_fu_477_p1) > signed(ap_const_lv32_0)) else "0";
    icmp_ln168_fu_807_p2 <= "1" when (unsigned(shl_ln7_fu_794_p3) > unsigned(empty_362_fu_801_p2)) else "0";
    lshr_ln168_fu_903_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln168_6_fu_869_p1(8-1 downto 0)))));
    lshr_ln_fu_714_p4 <= i_reg_1049_pp0_iter1_reg(8 downto 1);
    neighbor_table_offsets_address0 <= i_3_cast104_reg_1060_pp0_iter1_reg(9 - 1 downto 0);

    neighbor_table_offsets_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            neighbor_table_offsets_ce0 <= ap_const_logic_1;
        else 
            neighbor_table_offsets_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    neighbor_table_offsets_d0 <= acc_fu_118;

    neighbor_table_offsets_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln145_reg_1056_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_0))) then 
            neighbor_table_offsets_we0 <= ap_const_logic_1;
        else 
            neighbor_table_offsets_we0 <= ap_const_logic_0;
        end if; 
    end process;

    neighbor_tables_offsets_0_address0 <= i_3_cast104_reg_1060_pp0_iter1_reg(9 - 1 downto 0);

    neighbor_tables_offsets_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            neighbor_tables_offsets_0_ce0 <= ap_const_logic_1;
        else 
            neighbor_tables_offsets_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    neighbor_tables_offsets_0_d0 <= empty_fu_122;

    neighbor_tables_offsets_0_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln145_reg_1056_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_0))) then 
            neighbor_tables_offsets_0_we0 <= ap_const_logic_1;
        else 
            neighbor_tables_offsets_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    neighbor_tables_offsets_1_address0 <= i_3_cast104_reg_1060_pp0_iter1_reg(9 - 1 downto 0);

    neighbor_tables_offsets_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            neighbor_tables_offsets_1_ce0 <= ap_const_logic_1;
        else 
            neighbor_tables_offsets_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    neighbor_tables_offsets_1_d0 <= empty_359_fu_126;

    neighbor_tables_offsets_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln145_reg_1056_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_0))) then 
            neighbor_tables_offsets_1_we0 <= ap_const_logic_1;
        else 
            neighbor_tables_offsets_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    neighbor_tables_offsets_2_address0 <= i_3_cast104_reg_1060_pp0_iter1_reg(9 - 1 downto 0);

    neighbor_tables_offsets_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            neighbor_tables_offsets_2_ce0 <= ap_const_logic_1;
        else 
            neighbor_tables_offsets_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    neighbor_tables_offsets_2_d0 <= empty_360_fu_130;

    neighbor_tables_offsets_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln145_reg_1056_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_0))) then 
            neighbor_tables_offsets_2_we0 <= ap_const_logic_1;
        else 
            neighbor_tables_offsets_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    neighbor_tables_offsets_3_address0 <= i_3_cast104_reg_1060_pp0_iter1_reg(9 - 1 downto 0);

    neighbor_tables_offsets_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            neighbor_tables_offsets_3_ce0 <= ap_const_logic_1;
        else 
            neighbor_tables_offsets_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    neighbor_tables_offsets_3_d0 <= empty_361_fu_134;

    neighbor_tables_offsets_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln145_reg_1056_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_0))) then 
            neighbor_tables_offsets_3_we0 <= ap_const_logic_1;
        else 
            neighbor_tables_offsets_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    num_of_nodes_per_pe_1_fu_600_p2 <= std_logic_vector(unsigned(pe_num_of_nodes_1_fu_146) + unsigned(ap_const_lv32_1));
    num_of_nodes_per_pe_2_fu_654_p2 <= std_logic_vector(unsigned(pe_num_of_nodes_2_fu_150) + unsigned(ap_const_lv32_1));
    num_of_nodes_per_pe_3_fu_703_p2 <= std_logic_vector(unsigned(pe_num_of_nodes_3_fu_154) + unsigned(ap_const_lv32_1));
    num_of_nodes_per_pe_fu_554_p2 <= std_logic_vector(unsigned(pe_num_of_nodes_fu_142) + unsigned(ap_const_lv32_1));
    or_ln168_fu_933_p2 <= (and_ln168_2_fu_927_p2 or and_ln168_1_fu_921_p2);
    p_Result_432_fu_660_p3 <= (ap_const_lv1_1 & ap_phi_mux_node_pes_V_7_phi_fu_367_p4);
    p_Result_433_fu_775_p3 <= (ap_const_lv1_1 & ap_phi_reg_pp0_iter3_node_pes_V_6_reg_373);
    p_Result_s_fu_606_p3 <= (ap_const_lv1_1 & ap_phi_mux_node_pes_V_8_phi_fu_356_p4);
    p_out <= empty_361_fu_134;
    p_out1 <= empty_360_fu_130;

    p_out1_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln145_reg_1056_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_1))) then 
            p_out1_ap_vld <= ap_const_logic_1;
        else 
            p_out1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out2 <= empty_359_fu_126;

    p_out2_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln145_reg_1056_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_1))) then 
            p_out2_ap_vld <= ap_const_logic_1;
        else 
            p_out2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out3 <= empty_fu_122;

    p_out3_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln145_reg_1056_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_1))) then 
            p_out3_ap_vld <= ap_const_logic_1;
        else 
            p_out3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln145_reg_1056_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln145_reg_1056_pp0_iter1_reg = ap_const_lv1_1))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    pes_per_node_address0 <= pes_per_node_addr_reg_1137;
    pes_per_node_address1 <= zext_ln168_fu_723_p1(8 - 1 downto 0);

    pes_per_node_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            pes_per_node_ce0 <= ap_const_logic_1;
        else 
            pes_per_node_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pes_per_node_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pes_per_node_ce1 <= ap_const_logic_1;
        else 
            pes_per_node_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    pes_per_node_d0 <= (and_ln168_2_fu_927_p2 or and_ln168_1_fu_921_p2);

    pes_per_node_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            pes_per_node_we0 <= ap_const_logic_1;
        else 
            pes_per_node_we0 <= ap_const_logic_0;
        end if; 
    end process;

    reuse_select_fu_787_p3 <= 
        reuse_reg_fu_114 when (addr_cmp_reg_1143(0) = '1') else 
        pes_per_node_q1;
    select_ln168_1_fu_839_p3 <= 
        zext_ln168_2_fu_817_p1 when (icmp_ln168_fu_807_p2(0) = '1') else 
        zext_ln168_1_fu_813_p1;
    select_ln168_2_fu_847_p3 <= 
        xor_ln168_fu_825_p2 when (icmp_ln168_fu_807_p2(0) = '1') else 
        zext_ln168_1_fu_813_p1;
    select_ln168_3_fu_889_p3 <= 
        tmp_fu_879_p4 when (icmp_ln168_fu_807_p2(0) = '1') else 
        shl_ln168_fu_873_p2;
    select_ln168_fu_831_p3 <= 
        zext_ln168_1_fu_813_p1 when (icmp_ln168_fu_807_p2(0) = '1') else 
        zext_ln168_2_fu_817_p1;
    shl_ln168_1_fu_897_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln168_5_fu_865_p1(8-1 downto 0)))));
    shl_ln168_fu_873_p2 <= std_logic_vector(shift_left(unsigned(zext_ln168_3_fu_821_p1),to_integer(unsigned('0' & zext_ln168_4_fu_861_p1(8-1 downto 0)))));
    shl_ln7_fu_794_p3 <= (trunc_ln168_reg_1148 & ap_const_lv2_0);
    
    tmp_fu_879_p4_proc : process(shl_ln168_fu_873_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_fu_879_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_7(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_0(3 - 1 downto 0);
        v0_cpy := shl_ln168_fu_873_p2;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_0(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_7(3-1 downto 0)));
            for tmp_fu_879_p4_i in 0 to 8-1 loop
                v0_cpy(tmp_fu_879_p4_i) := shl_ln168_fu_873_p2(8-1-tmp_fu_879_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(8-1 downto 0)))));
        res_mask := res_mask(8-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_879_p4 <= resvalue(8-1 downto 0);
    end process;

    trunc_ln168_fu_737_p1 <= i_reg_1049_pp0_iter1_reg(1 - 1 downto 0);
    xor_ln168_1_fu_855_p2 <= (select_ln168_fu_831_p3 xor ap_const_lv4_7);
    xor_ln168_2_fu_915_p2 <= (ap_const_lv8_FF xor and_ln168_fu_909_p2);
    xor_ln168_fu_825_p2 <= (zext_ln168_1_fu_813_p1 xor ap_const_lv4_7);
    zext_ln137_1_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_node_pes_V_7_phi_fu_367_p4),3));
    zext_ln137_2_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_reg_pp0_iter3_node_pes_V_6_reg_373),4));
    zext_ln137_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_node_pes_V_8_phi_fu_356_p4),2));
    zext_ln163_1_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pe_num_of_nodes_1_fu_146),64));
    zext_ln163_2_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pe_num_of_nodes_2_fu_150),64));
    zext_ln163_3_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pe_num_of_nodes_3_fu_154),64));
    zext_ln163_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pe_num_of_nodes_fu_142),64));
    zext_ln168_1_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln7_fu_794_p3),4));
    zext_ln168_2_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_362_fu_801_p2),4));
    zext_ln168_3_fu_821_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_node_pes_V_5_phi_fu_385_p4),8));
    zext_ln168_4_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln168_2_fu_847_p3),8));
    zext_ln168_5_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln168_1_fu_839_p3),8));
    zext_ln168_6_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln168_1_fu_855_p2),8));
    zext_ln168_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_714_p4),64));
end behav;
