-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GIN_compute_graphs_load_graph_Pipeline_VITIS_LOOP_122_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (1023 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (1023 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    num_of_edges : IN STD_LOGIC_VECTOR (31 downto 0);
    full_pe_degree_tables_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    full_pe_degree_tables_ce0 : OUT STD_LOGIC;
    full_pe_degree_tables_we0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    full_pe_degree_tables_d0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    full_pe_degree_tables_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    edge_list_in : IN STD_LOGIC_VECTOR (63 downto 0);
    trunc_ln127_2 : IN STD_LOGIC_VECTOR (6 downto 0);
    degree_table_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    degree_table_1_ce0 : OUT STD_LOGIC;
    degree_table_1_we0 : OUT STD_LOGIC;
    degree_table_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    degree_table_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of GIN_compute_graphs_load_graph_Pipeline_VITIS_LOOP_122_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1024_lc_1 : STD_LOGIC_VECTOR (1023 downto
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_1F : STD_LOGIC_VECTOR (8 downto 0) := "000011111";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv128_lc_3 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv16_F : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state18_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state21_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state24_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_state27_pp0_stage2_iter8 : BOOLEAN;
    signal ap_block_state30_pp0_stage2_iter9 : BOOLEAN;
    signal ap_block_state33_pp0_stage2_iter10 : BOOLEAN;
    signal ap_block_state36_pp0_stage2_iter11 : BOOLEAN;
    signal ap_block_state39_pp0_stage2_iter12 : BOOLEAN;
    signal ap_block_state42_pp0_stage2_iter13 : BOOLEAN;
    signal ap_block_state45_pp0_stage2_iter14 : BOOLEAN;
    signal ap_block_state48_pp0_stage2_iter15 : BOOLEAN;
    signal ap_block_state51_pp0_stage2_iter16 : BOOLEAN;
    signal ap_block_state54_pp0_stage2_iter17 : BOOLEAN;
    signal ap_block_state57_pp0_stage2_iter18 : BOOLEAN;
    signal ap_block_state60_pp0_stage2_iter19 : BOOLEAN;
    signal ap_block_state63_pp0_stage2_iter20 : BOOLEAN;
    signal ap_block_state66_pp0_stage2_iter21 : BOOLEAN;
    signal ap_block_state69_pp0_stage2_iter22 : BOOLEAN;
    signal icmp_ln122_reg_703 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_703_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state72_pp0_stage2_iter23 : BOOLEAN;
    signal ap_block_state75_pp0_stage2_iter24 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal mem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal mem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln127_reg_712 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_712_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state55_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state58_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state61_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state64_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state67_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state70_pp0_stage0_iter23 : BOOLEAN;
    signal ap_predicate_op181_read_state73 : BOOLEAN;
    signal ap_block_state73_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state76_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln122_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_703_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_703_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_703_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_703_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_703_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_703_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_703_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_703_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_703_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_703_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_703_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_703_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_703_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_703_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_703_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_703_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_703_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_703_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_703_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_703_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_703_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_703_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln127_1_fu_254_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707_pp0_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707_pp0_iter7_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707_pp0_iter8_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707_pp0_iter9_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707_pp0_iter10_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707_pp0_iter11_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707_pp0_iter12_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707_pp0_iter13_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707_pp0_iter14_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707_pp0_iter15_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707_pp0_iter16_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707_pp0_iter17_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707_pp0_iter18_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707_pp0_iter19_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707_pp0_iter20_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707_pp0_iter21_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707_pp0_iter22_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707_pp0_iter23_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_1_reg_707_pp0_iter24_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln127_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_712_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_712_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_712_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_712_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_712_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_712_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_712_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_712_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_712_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_712_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_712_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_712_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_712_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_712_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_712_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_712_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_712_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_712_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_712_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_712_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_712_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_712_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_reg_716 : STD_LOGIC_VECTOR (56 downto 0);
    signal select_ln127_fu_276_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln127_reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state29_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state32_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state35_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_state38_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_state41_pp0_stage1_iter13 : BOOLEAN;
    signal ap_block_state44_pp0_stage1_iter14 : BOOLEAN;
    signal ap_block_state47_pp0_stage1_iter15 : BOOLEAN;
    signal ap_block_state50_pp0_stage1_iter16 : BOOLEAN;
    signal ap_block_state53_pp0_stage1_iter17 : BOOLEAN;
    signal ap_block_state56_pp0_stage1_iter18 : BOOLEAN;
    signal ap_block_state59_pp0_stage1_iter19 : BOOLEAN;
    signal ap_block_state62_pp0_stage1_iter20 : BOOLEAN;
    signal ap_block_state65_pp0_stage1_iter21 : BOOLEAN;
    signal ap_block_state68_pp0_stage1_iter22 : BOOLEAN;
    signal ap_block_state71_pp0_stage1_iter23 : BOOLEAN;
    signal ap_block_state74_pp0_stage1_iter24 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal mem_addr_read_reg_732 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal edge_v_cast_fu_327_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal edge_v_cast_reg_742 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1294_reg_747 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln130_1_fu_359_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln130_1_reg_752 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln131_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln131_reg_757 : STD_LOGIC_VECTOR (63 downto 0);
    signal degree_table_1_addr_reg_763 : STD_LOGIC_VECTOR (8 downto 0);
    signal full_pe_degree_tables_addr_reg_768 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln131_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln131_reg_773 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln130_fu_407_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln130_reg_779 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln132_fu_541_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln132_reg_784 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln132_1_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_1_reg_789 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1297_fu_553_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1297_reg_795 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln132_4_fu_565_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln132_4_reg_800 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln132_1_fu_613_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln132_1_reg_805 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_phi_reg_pp0_iter3_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_phi_reg_pp0_iter4_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_phi_reg_pp0_iter5_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_phi_reg_pp0_iter6_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_phi_reg_pp0_iter7_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_phi_reg_pp0_iter8_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_phi_reg_pp0_iter9_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_phi_reg_pp0_iter10_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_phi_reg_pp0_iter11_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_phi_reg_pp0_iter12_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_phi_reg_pp0_iter13_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_phi_reg_pp0_iter14_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_phi_reg_pp0_iter15_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_phi_reg_pp0_iter16_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_phi_reg_pp0_iter17_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_phi_reg_pp0_iter18_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_phi_reg_pp0_iter19_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_phi_reg_pp0_iter20_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_phi_reg_pp0_iter21_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_phi_reg_pp0_iter22_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_phi_reg_pp0_iter23_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_phi_reg_pp0_iter24_empty_reg_183 : STD_LOGIC_VECTOR (1023 downto 0);
    signal sext_ln127_fu_289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_addr_reg_fu_116 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal reuse_reg_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln122_fu_218_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln132_2_fu_675_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_224_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln127_fu_236_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln127_fu_232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln127_3_fu_240_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_fu_248_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln127_1_fu_306_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_299_p3 : STD_LOGIC_VECTOR (2047 downto 0);
    signal zext_ln127_1_fu_313_p1 : STD_LOGIC_VECTOR (2047 downto 0);
    signal lshr_ln127_fu_317_p2 : STD_LOGIC_VECTOR (2047 downto 0);
    signal sub_ln130_fu_345_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_and_t_cast_fu_351_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal edge_u_fu_323_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal addr_cmp_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1299_fu_382_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_400_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_837_fu_421_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_365_fu_429_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_364_fu_417_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1295_fu_441_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln132_fu_449_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln132_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln132_fu_463_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln132_2_fu_475_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1296_fu_453_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln132_1_fu_469_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln132_fu_481_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln132_2_fu_497_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln132_3_fu_505_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln132_1_fu_489_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln132_fu_511_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln132_1_fu_515_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln132_fu_519_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln132_1_fu_525_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln132_fu_531_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln132_1_fu_537_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_363_fu_413_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln132_2_fu_561_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln132_3_fu_571_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln132_4_fu_579_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln132_5_fu_587_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln132_4_fu_593_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln132_5_fu_597_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln132_1_fu_601_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln132_2_fu_607_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln132_5_fu_626_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln132_2_fu_623_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln132_3_fu_631_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln132_fu_635_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_1298_fu_641_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln132_6_fu_651_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal udiv_fu_664_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln132_6_fu_671_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter24_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to23 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0_1to25 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component GIN_compute_graphs_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component GIN_compute_graphs_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter24_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter10_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter11_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter12_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter13_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter14_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then 
                ap_loop_exit_ready_pp0_iter14_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter15_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then 
                ap_loop_exit_ready_pp0_iter15_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter16_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then 
                ap_loop_exit_ready_pp0_iter16_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter17_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then 
                ap_loop_exit_ready_pp0_iter17_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter18_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then 
                ap_loop_exit_ready_pp0_iter18_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter19_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then 
                ap_loop_exit_ready_pp0_iter19_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter20_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then 
                ap_loop_exit_ready_pp0_iter20_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter21_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then 
                ap_loop_exit_ready_pp0_iter21_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter22_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then 
                ap_loop_exit_ready_pp0_iter22_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter23_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then 
                ap_loop_exit_ready_pp0_iter23_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter24_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then 
                ap_loop_exit_ready_pp0_iter24_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter9_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter24_empty_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (icmp_ln127_reg_712_pp0_iter23_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln122_reg_703_pp0_iter23_reg = ap_const_lv1_0))) then 
                ap_phi_reg_pp0_iter24_empty_reg_183 <= m_axi_mem_RDATA;
            elsif (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_phi_reg_pp0_iter24_empty_reg_183 <= ap_phi_reg_pp0_iter23_empty_reg_183;
            end if; 
        end if;
    end process;

    i_2_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln122_fu_212_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_2_fu_124 <= add_ln122_fu_218_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_2_fu_124 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                reuse_addr_reg_fu_116 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
            elsif (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                reuse_addr_reg_fu_116 <= zext_ln131_reg_757;
            end if; 
        end if;
    end process;

    reuse_reg_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_reg_fu_120 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter25 = ap_const_logic_1)) then 
                    reuse_reg_fu_120 <= add_ln131_reg_773;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_fu_212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln127_1_reg_707 <= add_ln127_1_fu_254_p2;
                icmp_ln127_reg_712 <= icmp_ln127_fu_260_p2;
                    select_ln127_reg_721(1 downto 0) <= select_ln127_fu_276_p3(1 downto 0);
                trunc_ln_reg_716 <= add_ln127_fu_248_p2(63 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln127_1_reg_707_pp0_iter10_reg <= add_ln127_1_reg_707_pp0_iter9_reg;
                add_ln127_1_reg_707_pp0_iter11_reg <= add_ln127_1_reg_707_pp0_iter10_reg;
                add_ln127_1_reg_707_pp0_iter12_reg <= add_ln127_1_reg_707_pp0_iter11_reg;
                add_ln127_1_reg_707_pp0_iter13_reg <= add_ln127_1_reg_707_pp0_iter12_reg;
                add_ln127_1_reg_707_pp0_iter14_reg <= add_ln127_1_reg_707_pp0_iter13_reg;
                add_ln127_1_reg_707_pp0_iter15_reg <= add_ln127_1_reg_707_pp0_iter14_reg;
                add_ln127_1_reg_707_pp0_iter16_reg <= add_ln127_1_reg_707_pp0_iter15_reg;
                add_ln127_1_reg_707_pp0_iter17_reg <= add_ln127_1_reg_707_pp0_iter16_reg;
                add_ln127_1_reg_707_pp0_iter18_reg <= add_ln127_1_reg_707_pp0_iter17_reg;
                add_ln127_1_reg_707_pp0_iter19_reg <= add_ln127_1_reg_707_pp0_iter18_reg;
                add_ln127_1_reg_707_pp0_iter1_reg <= add_ln127_1_reg_707;
                add_ln127_1_reg_707_pp0_iter20_reg <= add_ln127_1_reg_707_pp0_iter19_reg;
                add_ln127_1_reg_707_pp0_iter21_reg <= add_ln127_1_reg_707_pp0_iter20_reg;
                add_ln127_1_reg_707_pp0_iter22_reg <= add_ln127_1_reg_707_pp0_iter21_reg;
                add_ln127_1_reg_707_pp0_iter23_reg <= add_ln127_1_reg_707_pp0_iter22_reg;
                add_ln127_1_reg_707_pp0_iter24_reg <= add_ln127_1_reg_707_pp0_iter23_reg;
                add_ln127_1_reg_707_pp0_iter2_reg <= add_ln127_1_reg_707_pp0_iter1_reg;
                add_ln127_1_reg_707_pp0_iter3_reg <= add_ln127_1_reg_707_pp0_iter2_reg;
                add_ln127_1_reg_707_pp0_iter4_reg <= add_ln127_1_reg_707_pp0_iter3_reg;
                add_ln127_1_reg_707_pp0_iter5_reg <= add_ln127_1_reg_707_pp0_iter4_reg;
                add_ln127_1_reg_707_pp0_iter6_reg <= add_ln127_1_reg_707_pp0_iter5_reg;
                add_ln127_1_reg_707_pp0_iter7_reg <= add_ln127_1_reg_707_pp0_iter6_reg;
                add_ln127_1_reg_707_pp0_iter8_reg <= add_ln127_1_reg_707_pp0_iter7_reg;
                add_ln127_1_reg_707_pp0_iter9_reg <= add_ln127_1_reg_707_pp0_iter8_reg;
                icmp_ln122_reg_703 <= icmp_ln122_fu_212_p2;
                icmp_ln122_reg_703_pp0_iter10_reg <= icmp_ln122_reg_703_pp0_iter9_reg;
                icmp_ln122_reg_703_pp0_iter11_reg <= icmp_ln122_reg_703_pp0_iter10_reg;
                icmp_ln122_reg_703_pp0_iter12_reg <= icmp_ln122_reg_703_pp0_iter11_reg;
                icmp_ln122_reg_703_pp0_iter13_reg <= icmp_ln122_reg_703_pp0_iter12_reg;
                icmp_ln122_reg_703_pp0_iter14_reg <= icmp_ln122_reg_703_pp0_iter13_reg;
                icmp_ln122_reg_703_pp0_iter15_reg <= icmp_ln122_reg_703_pp0_iter14_reg;
                icmp_ln122_reg_703_pp0_iter16_reg <= icmp_ln122_reg_703_pp0_iter15_reg;
                icmp_ln122_reg_703_pp0_iter17_reg <= icmp_ln122_reg_703_pp0_iter16_reg;
                icmp_ln122_reg_703_pp0_iter18_reg <= icmp_ln122_reg_703_pp0_iter17_reg;
                icmp_ln122_reg_703_pp0_iter19_reg <= icmp_ln122_reg_703_pp0_iter18_reg;
                icmp_ln122_reg_703_pp0_iter1_reg <= icmp_ln122_reg_703;
                icmp_ln122_reg_703_pp0_iter20_reg <= icmp_ln122_reg_703_pp0_iter19_reg;
                icmp_ln122_reg_703_pp0_iter21_reg <= icmp_ln122_reg_703_pp0_iter20_reg;
                icmp_ln122_reg_703_pp0_iter22_reg <= icmp_ln122_reg_703_pp0_iter21_reg;
                icmp_ln122_reg_703_pp0_iter23_reg <= icmp_ln122_reg_703_pp0_iter22_reg;
                icmp_ln122_reg_703_pp0_iter2_reg <= icmp_ln122_reg_703_pp0_iter1_reg;
                icmp_ln122_reg_703_pp0_iter3_reg <= icmp_ln122_reg_703_pp0_iter2_reg;
                icmp_ln122_reg_703_pp0_iter4_reg <= icmp_ln122_reg_703_pp0_iter3_reg;
                icmp_ln122_reg_703_pp0_iter5_reg <= icmp_ln122_reg_703_pp0_iter4_reg;
                icmp_ln122_reg_703_pp0_iter6_reg <= icmp_ln122_reg_703_pp0_iter5_reg;
                icmp_ln122_reg_703_pp0_iter7_reg <= icmp_ln122_reg_703_pp0_iter6_reg;
                icmp_ln122_reg_703_pp0_iter8_reg <= icmp_ln122_reg_703_pp0_iter7_reg;
                icmp_ln122_reg_703_pp0_iter9_reg <= icmp_ln122_reg_703_pp0_iter8_reg;
                icmp_ln127_reg_712_pp0_iter10_reg <= icmp_ln127_reg_712_pp0_iter9_reg;
                icmp_ln127_reg_712_pp0_iter11_reg <= icmp_ln127_reg_712_pp0_iter10_reg;
                icmp_ln127_reg_712_pp0_iter12_reg <= icmp_ln127_reg_712_pp0_iter11_reg;
                icmp_ln127_reg_712_pp0_iter13_reg <= icmp_ln127_reg_712_pp0_iter12_reg;
                icmp_ln127_reg_712_pp0_iter14_reg <= icmp_ln127_reg_712_pp0_iter13_reg;
                icmp_ln127_reg_712_pp0_iter15_reg <= icmp_ln127_reg_712_pp0_iter14_reg;
                icmp_ln127_reg_712_pp0_iter16_reg <= icmp_ln127_reg_712_pp0_iter15_reg;
                icmp_ln127_reg_712_pp0_iter17_reg <= icmp_ln127_reg_712_pp0_iter16_reg;
                icmp_ln127_reg_712_pp0_iter18_reg <= icmp_ln127_reg_712_pp0_iter17_reg;
                icmp_ln127_reg_712_pp0_iter19_reg <= icmp_ln127_reg_712_pp0_iter18_reg;
                icmp_ln127_reg_712_pp0_iter1_reg <= icmp_ln127_reg_712;
                icmp_ln127_reg_712_pp0_iter20_reg <= icmp_ln127_reg_712_pp0_iter19_reg;
                icmp_ln127_reg_712_pp0_iter21_reg <= icmp_ln127_reg_712_pp0_iter20_reg;
                icmp_ln127_reg_712_pp0_iter22_reg <= icmp_ln127_reg_712_pp0_iter21_reg;
                icmp_ln127_reg_712_pp0_iter23_reg <= icmp_ln127_reg_712_pp0_iter22_reg;
                icmp_ln127_reg_712_pp0_iter2_reg <= icmp_ln127_reg_712_pp0_iter1_reg;
                icmp_ln127_reg_712_pp0_iter3_reg <= icmp_ln127_reg_712_pp0_iter2_reg;
                icmp_ln127_reg_712_pp0_iter4_reg <= icmp_ln127_reg_712_pp0_iter3_reg;
                icmp_ln127_reg_712_pp0_iter5_reg <= icmp_ln127_reg_712_pp0_iter4_reg;
                icmp_ln127_reg_712_pp0_iter6_reg <= icmp_ln127_reg_712_pp0_iter5_reg;
                icmp_ln127_reg_712_pp0_iter7_reg <= icmp_ln127_reg_712_pp0_iter6_reg;
                icmp_ln127_reg_712_pp0_iter8_reg <= icmp_ln127_reg_712_pp0_iter7_reg;
                icmp_ln127_reg_712_pp0_iter9_reg <= icmp_ln127_reg_712_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln131_reg_773 <= add_ln131_fu_390_p2;
                add_ln132_reg_784 <= add_ln132_fu_541_p2;
                and_ln132_1_reg_805 <= and_ln132_1_fu_613_p2;
                icmp_ln132_1_reg_789 <= icmp_ln132_1_fu_547_p2;
                select_ln130_reg_779 <= select_ln130_fu_407_p3;
                    sub_ln132_4_reg_800(7 downto 5) <= sub_ln132_4_fu_565_p2(7 downto 5);
                    tmp_1297_reg_795(7 downto 5) <= tmp_1297_fu_553_p3(7 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_phi_reg_pp0_iter10_empty_reg_183 <= ap_phi_reg_pp0_iter9_empty_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_phi_reg_pp0_iter11_empty_reg_183 <= ap_phi_reg_pp0_iter10_empty_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_phi_reg_pp0_iter12_empty_reg_183 <= ap_phi_reg_pp0_iter11_empty_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_phi_reg_pp0_iter13_empty_reg_183 <= ap_phi_reg_pp0_iter12_empty_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_phi_reg_pp0_iter14_empty_reg_183 <= ap_phi_reg_pp0_iter13_empty_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_phi_reg_pp0_iter15_empty_reg_183 <= ap_phi_reg_pp0_iter14_empty_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_phi_reg_pp0_iter16_empty_reg_183 <= ap_phi_reg_pp0_iter15_empty_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_phi_reg_pp0_iter17_empty_reg_183 <= ap_phi_reg_pp0_iter16_empty_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_phi_reg_pp0_iter18_empty_reg_183 <= ap_phi_reg_pp0_iter17_empty_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_phi_reg_pp0_iter19_empty_reg_183 <= ap_phi_reg_pp0_iter18_empty_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_phi_reg_pp0_iter1_empty_reg_183 <= ap_phi_reg_pp0_iter0_empty_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_phi_reg_pp0_iter20_empty_reg_183 <= ap_phi_reg_pp0_iter19_empty_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_phi_reg_pp0_iter21_empty_reg_183 <= ap_phi_reg_pp0_iter20_empty_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_phi_reg_pp0_iter22_empty_reg_183 <= ap_phi_reg_pp0_iter21_empty_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_phi_reg_pp0_iter23_empty_reg_183 <= ap_phi_reg_pp0_iter22_empty_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_phi_reg_pp0_iter2_empty_reg_183 <= ap_phi_reg_pp0_iter1_empty_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_phi_reg_pp0_iter3_empty_reg_183 <= ap_phi_reg_pp0_iter2_empty_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_phi_reg_pp0_iter4_empty_reg_183 <= ap_phi_reg_pp0_iter3_empty_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_phi_reg_pp0_iter5_empty_reg_183 <= ap_phi_reg_pp0_iter4_empty_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_phi_reg_pp0_iter6_empty_reg_183 <= ap_phi_reg_pp0_iter5_empty_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_phi_reg_pp0_iter7_empty_reg_183 <= ap_phi_reg_pp0_iter6_empty_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_phi_reg_pp0_iter8_empty_reg_183 <= ap_phi_reg_pp0_iter7_empty_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_phi_reg_pp0_iter9_empty_reg_183 <= ap_phi_reg_pp0_iter8_empty_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                degree_table_1_addr_reg_763 <= zext_ln131_fu_365_p1(9 - 1 downto 0);
                edge_v_cast_reg_742 <= lshr_ln127_fu_317_p2(33 downto 32);
                full_pe_degree_tables_addr_reg_768 <= zext_ln131_fu_365_p1(9 - 1 downto 0);
                sub_ln130_1_reg_752 <= sub_ln130_1_fu_359_p2;
                tmp_1294_reg_747 <= lshr_ln127_fu_317_p2(63 downto 63);
                    zext_ln131_reg_757(8 downto 0) <= zext_ln131_fu_365_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln122_reg_703_pp0_iter23_reg = ap_const_lv1_0))) then
                mem_addr_read_reg_732 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    select_ln127_reg_721(31 downto 2) <= "000000000000000000000000000000";
    zext_ln131_reg_757(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_1297_reg_795(4 downto 0) <= "00000";
    sub_ln132_4_reg_800(4 downto 0) <= "11111";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter24_stage0, ap_idle_pp0_0to23, ap_idle_pp0_1to25, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to23 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter24_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to25 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln122_fu_218_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv32_1));
    add_ln127_1_fu_254_p2 <= std_logic_vector(unsigned(trunc_ln127_3_fu_240_p3) + unsigned(trunc_ln127_2));
    add_ln127_fu_248_p2 <= std_logic_vector(unsigned(zext_ln127_fu_232_p1) + unsigned(edge_list_in));
    add_ln131_fu_390_p2 <= std_logic_vector(unsigned(tmp_1299_fu_382_p3) + unsigned(ap_const_lv32_1));
    add_ln132_fu_541_p2 <= std_logic_vector(unsigned(trunc_ln132_1_fu_537_p1) + unsigned(ap_const_lv32_1));
    addr_cmp_fu_377_p2 <= "1" when (reuse_addr_reg_fu_116 = zext_ln131_reg_757) else "0";
    and_ln132_1_fu_613_p2 <= (shl_ln132_1_fu_601_p2 and lshr_ln132_2_fu_607_p2);
    and_ln132_fu_531_p2 <= (lshr_ln132_fu_519_p2 and lshr_ln132_1_fu_525_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter24, m_axi_mem_RVALID, ap_predicate_op181_read_state73)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_predicate_op181_read_state73 = ap_const_boolean_1) and (m_axi_mem_RVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter24, m_axi_mem_RVALID, ap_predicate_op181_read_state73)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_predicate_op181_read_state73 = ap_const_boolean_1) and (m_axi_mem_RVALID = ap_const_logic_0));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state2_io)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state2_io)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter23, m_axi_mem_RVALID, icmp_ln122_reg_703_pp0_iter23_reg)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (icmp_ln122_reg_703_pp0_iter23_reg = ap_const_lv1_0) and (m_axi_mem_RVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter23, m_axi_mem_RVALID, icmp_ln122_reg_703_pp0_iter23_reg)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (icmp_ln122_reg_703_pp0_iter23_reg = ap_const_lv1_0) and (m_axi_mem_RVALID = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage2_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(m_axi_mem_ARREADY, icmp_ln122_reg_703)
    begin
                ap_block_state2_io <= ((icmp_ln122_reg_703 = ap_const_lv1_0) and (m_axi_mem_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage2_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage2_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage2_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage2_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage1_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage2_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage1_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage2_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage1_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage2_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage1_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage2_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage1_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage2_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage1_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage2_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage1_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage2_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage1_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage2_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage1_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage2_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage1_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage2_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp0_stage1_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state72_pp0_stage2_iter23_assign_proc : process(m_axi_mem_RVALID, icmp_ln122_reg_703_pp0_iter23_reg)
    begin
                ap_block_state72_pp0_stage2_iter23 <= ((icmp_ln122_reg_703_pp0_iter23_reg = ap_const_lv1_0) and (m_axi_mem_RVALID = ap_const_logic_0));
    end process;


    ap_block_state73_pp0_stage0_iter24_assign_proc : process(m_axi_mem_RVALID, ap_predicate_op181_read_state73)
    begin
                ap_block_state73_pp0_stage0_iter24 <= ((ap_predicate_op181_read_state73 = ap_const_boolean_1) and (m_axi_mem_RVALID = ap_const_logic_0));
    end process;

        ap_block_state74_pp0_stage1_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp0_stage2_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, icmp_ln122_reg_703, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (icmp_ln122_reg_703 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter24_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter24, icmp_ln122_reg_703_pp0_iter23_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln122_reg_703_pp0_iter23_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter24_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter24_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter24_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter24_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to23_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to23 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to25_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to25 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to25 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;
    ap_phi_reg_pp0_iter0_empty_reg

    ap_predicate_op181_read_state73_assign_proc : process(icmp_ln122_reg_703_pp0_iter23_reg, icmp_ln127_reg_712_pp0_iter23_reg)
    begin
                ap_predicate_op181_read_state73 <= ((icmp_ln127_reg_712_pp0_iter23_reg = ap_const_lv1_1) and (icmp_ln122_reg_703_pp0_iter23_reg = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_2_fu_124)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_i <= i_2_fu_124;
        end if; 
    end process;


    degree_table_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, zext_ln131_fu_365_p1, degree_table_1_addr_reg_763)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            degree_table_1_address0 <= degree_table_1_addr_reg_763;
        elsif (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            degree_table_1_address0 <= zext_ln131_fu_365_p1(9 - 1 downto 0);
        else 
            degree_table_1_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    degree_table_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            degree_table_1_ce0 <= ap_const_logic_1;
        else 
            degree_table_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    degree_table_1_d0 <= add_ln131_reg_773;

    degree_table_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter25, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            degree_table_1_we0 <= ap_const_logic_1;
        else 
            degree_table_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    edge_u_fu_323_p1 <= lshr_ln127_fu_317_p2(9 - 1 downto 0);
    edge_v_cast_fu_327_p4 <= lshr_ln127_fu_317_p2(33 downto 32);
    empty_363_fu_413_p1 <= select_ln130_fu_407_p3(3 - 1 downto 0);
    empty_364_fu_417_p1 <= select_ln130_fu_407_p3(3 - 1 downto 0);
    empty_365_fu_429_p2 <= (tmp_837_fu_421_p3 or ap_const_lv9_1F);

    full_pe_degree_tables_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, zext_ln131_fu_365_p1, full_pe_degree_tables_addr_reg_768)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            full_pe_degree_tables_address0 <= full_pe_degree_tables_addr_reg_768;
        elsif (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            full_pe_degree_tables_address0 <= zext_ln131_fu_365_p1(9 - 1 downto 0);
        else 
            full_pe_degree_tables_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    full_pe_degree_tables_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            full_pe_degree_tables_ce0 <= ap_const_logic_1;
        else 
            full_pe_degree_tables_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    full_pe_degree_tables_d0 <= (select_ln132_6_fu_651_p3 and and_ln132_1_reg_805);

    full_pe_degree_tables_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter25, ap_block_pp0_stage0_11001, shl_ln132_2_fu_675_p2)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            full_pe_degree_tables_we0 <= shl_ln132_2_fu_675_p2;
        else 
            full_pe_degree_tables_we0 <= ap_const_lv16_0;
        end if; 
    end process;

    icmp_ln122_fu_212_p2 <= "1" when (ap_sig_allocacmp_i = num_of_edges) else "0";
    icmp_ln127_fu_260_p2 <= "1" when (unsigned(add_ln127_1_fu_254_p2) > unsigned(ap_const_lv7_78)) else "0";
    icmp_ln132_1_fu_547_p2 <= "1" when (unsigned(tmp_837_fu_421_p3) > unsigned(empty_365_fu_429_p2)) else "0";
    icmp_ln132_fu_435_p2 <= "1" when (unsigned(tmp_837_fu_421_p3) > unsigned(empty_365_fu_429_p2)) else "0";
    lshr_ln127_fu_317_p2 <= std_logic_vector(shift_right(unsigned(tmp_fu_299_p3),to_integer(unsigned('0' & zext_ln127_1_fu_313_p1(31-1 downto 0)))));
    lshr_ln132_1_fu_525_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & zext_ln132_1_fu_515_p1(31-1 downto 0)))));
    lshr_ln132_2_fu_607_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & zext_ln132_5_fu_597_p1(31-1 downto 0)))));
    lshr_ln132_fu_519_p2 <= std_logic_vector(shift_right(unsigned(select_ln132_1_fu_489_p3),to_integer(unsigned('0' & zext_ln132_fu_511_p1(31-1 downto 0)))));
    m_axi_mem_ARADDR <= sext_ln127_fu_289_p1;
    m_axi_mem_ARBURST <= ap_const_lv2_0;
    m_axi_mem_ARCACHE <= ap_const_lv4_0;
    m_axi_mem_ARID <= ap_const_lv1_0;
    m_axi_mem_ARLEN <= select_ln127_reg_721;
    m_axi_mem_ARLOCK <= ap_const_lv2_0;
    m_axi_mem_ARPROT <= ap_const_lv3_0;
    m_axi_mem_ARQOS <= ap_const_lv4_0;
    m_axi_mem_ARREGION <= ap_const_lv4_0;
    m_axi_mem_ARSIZE <= ap_const_lv3_0;
    m_axi_mem_ARUSER <= ap_const_lv1_0;

    m_axi_mem_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln122_reg_703, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln122_reg_703 = ap_const_lv1_0))) then 
            m_axi_mem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem_AWADDR <= ap_const_lv64_0;
    m_axi_mem_AWBURST <= ap_const_lv2_0;
    m_axi_mem_AWCACHE <= ap_const_lv4_0;
    m_axi_mem_AWID <= ap_const_lv1_0;
    m_axi_mem_AWLEN <= ap_const_lv32_0;
    m_axi_mem_AWLOCK <= ap_const_lv2_0;
    m_axi_mem_AWPROT <= ap_const_lv3_0;
    m_axi_mem_AWQOS <= ap_const_lv4_0;
    m_axi_mem_AWREGION <= ap_const_lv4_0;
    m_axi_mem_AWSIZE <= ap_const_lv3_0;
    m_axi_mem_AWUSER <= ap_const_lv1_0;
    m_axi_mem_AWVALID <= ap_const_logic_0;
    m_axi_mem_BREADY <= ap_const_logic_0;

    m_axi_mem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_CS_fsm_pp0_stage2, icmp_ln122_reg_703_pp0_iter23_reg, ap_predicate_op181_read_state73, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_predicate_op181_read_state73 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln122_reg_703_pp0_iter23_reg = ap_const_lv1_0)))) then 
            m_axi_mem_RREADY <= ap_const_logic_1;
        else 
            m_axi_mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem_WDATA <= ap_const_lv1024_lc_1;
    m_axi_mem_WID <= ap_const_lv1_0;
    m_axi_mem_WLAST <= ap_const_logic_0;
    m_axi_mem_WSTRB <= ap_const_lv128_lc_1;
    m_axi_mem_WUSER <= ap_const_lv1_0;
    m_axi_mem_WVALID <= ap_const_logic_0;

    mem_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_mem_ARREADY, icmp_ln122_reg_703, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln122_reg_703 = ap_const_lv1_0))) then 
            mem_blk_n_AR <= m_axi_mem_ARREADY;
        else 
            mem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_CS_fsm_pp0_stage2, m_axi_mem_RVALID, icmp_ln122_reg_703_pp0_iter23_reg, ap_block_pp0_stage2, ap_block_pp0_stage0, icmp_ln127_reg_712_pp0_iter23_reg)
    begin
        if ((((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (icmp_ln127_reg_712_pp0_iter23_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln122_reg_703_pp0_iter23_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (icmp_ln122_reg_703_pp0_iter23_reg = ap_const_lv1_0)))) then 
            mem_blk_n_R <= m_axi_mem_RVALID;
        else 
            mem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    p_and_t_cast_fu_351_p3 <= (ap_const_lv2_0 & sub_ln130_fu_345_p2);
    select_ln127_fu_276_p3 <= 
        ap_const_lv32_2 when (icmp_ln127_fu_260_p2(0) = '1') else 
        ap_const_lv32_1;
    select_ln130_fu_407_p3 <= 
        sub_ln130_1_reg_752 when (tmp_1294_reg_747(0) = '1') else 
        tmp_s_fu_400_p3;
    select_ln132_1_fu_489_p3 <= 
        tmp_1296_fu_453_p4 when (icmp_ln132_fu_435_p2(0) = '1') else 
        full_pe_degree_tables_q0;
    select_ln132_2_fu_497_p3 <= 
        sub_ln132_1_fu_469_p2 when (icmp_ln132_fu_435_p2(0) = '1') else 
        tmp_1295_fu_441_p3;
    select_ln132_3_fu_571_p3 <= 
        tmp_1297_fu_553_p3 when (icmp_ln132_1_fu_547_p2(0) = '1') else 
        trunc_ln132_2_fu_561_p1;
    select_ln132_4_fu_579_p3 <= 
        trunc_ln132_2_fu_561_p1 when (icmp_ln132_1_fu_547_p2(0) = '1') else 
        tmp_1297_fu_553_p3;
    select_ln132_5_fu_626_p3 <= 
        sub_ln132_4_reg_800 when (icmp_ln132_1_reg_789(0) = '1') else 
        tmp_1297_reg_795;
    select_ln132_6_fu_651_p3 <= 
        tmp_1298_fu_641_p4 when (icmp_ln132_1_reg_789(0) = '1') else 
        shl_ln132_fu_635_p2;
    select_ln132_fu_481_p3 <= 
        sub_ln132_fu_463_p2 when (icmp_ln132_fu_435_p2(0) = '1') else 
        sub_ln132_2_fu_475_p2;
        sext_ln127_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_716),64));

    shl_ln127_1_fu_306_p3 <= (add_ln127_1_reg_707_pp0_iter24_reg & ap_const_lv3_0);
    shl_ln132_1_fu_601_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & zext_ln132_4_fu_593_p1(31-1 downto 0)))));
    shl_ln132_2_fu_675_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv16_F),to_integer(unsigned('0' & zext_ln132_6_fu_671_p1(16-1 downto 0)))));
    shl_ln132_fu_635_p2 <= std_logic_vector(shift_left(unsigned(zext_ln132_2_fu_623_p1),to_integer(unsigned('0' & zext_ln132_3_fu_631_p1(31-1 downto 0)))));
    shl_ln_fu_224_p3 <= (ap_sig_allocacmp_i & ap_const_lv3_0);
    sub_ln130_1_fu_359_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(p_and_t_cast_fu_351_p3));
    sub_ln130_fu_345_p2 <= std_logic_vector(unsigned(ap_const_lv2_0) - unsigned(edge_v_cast_fu_327_p4));
    sub_ln132_1_fu_469_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_1295_fu_441_p3));
    sub_ln132_2_fu_475_p2 <= std_logic_vector(unsigned(trunc_ln132_fu_449_p1) - unsigned(tmp_1295_fu_441_p3));
    sub_ln132_3_fu_505_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(select_ln132_fu_481_p3));
    sub_ln132_4_fu_565_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_1297_fu_553_p3));
    sub_ln132_5_fu_587_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(select_ln132_3_fu_571_p3));
    sub_ln132_fu_463_p2 <= std_logic_vector(unsigned(tmp_1295_fu_441_p3) - unsigned(trunc_ln132_fu_449_p1));
    tmp_1295_fu_441_p3 <= (empty_364_fu_417_p1 & ap_const_lv5_0);
    
    tmp_1296_fu_453_p4_proc : process(full_pe_degree_tables_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_1296_fu_453_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := full_pe_degree_tables_q0;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_1296_fu_453_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_1296_fu_453_p4_i) := full_pe_degree_tables_q0(128-1-tmp_1296_fu_453_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_1296_fu_453_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_1297_fu_553_p3 <= (empty_363_fu_413_p1 & ap_const_lv5_0);
    
    tmp_1298_fu_641_p4_proc : process(shl_ln132_fu_635_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_1298_fu_641_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := shl_ln132_fu_635_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_1298_fu_641_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_1298_fu_641_p4_i) := shl_ln132_fu_635_p2(128-1-tmp_1298_fu_641_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_1298_fu_641_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_1299_fu_382_p3 <= 
        reuse_reg_fu_120 when (addr_cmp_fu_377_p2(0) = '1') else 
        degree_table_1_q0;
    tmp_837_fu_421_p3 <= (select_ln130_fu_407_p3 & ap_const_lv5_0);
    tmp_fu_299_p3 <= (ap_phi_reg_pp0_iter24_empty_reg_183 & mem_addr_read_reg_732);
    tmp_s_fu_400_p3 <= (ap_const_lv2_0 & edge_v_cast_reg_742);
    trunc_ln127_3_fu_240_p3 <= (trunc_ln127_fu_236_p1 & ap_const_lv3_0);
    trunc_ln127_fu_236_p1 <= ap_sig_allocacmp_i(4 - 1 downto 0);
    trunc_ln132_1_fu_537_p1 <= and_ln132_fu_531_p2(32 - 1 downto 0);
    trunc_ln132_2_fu_561_p1 <= empty_365_fu_429_p2(8 - 1 downto 0);
    trunc_ln132_fu_449_p1 <= empty_365_fu_429_p2(8 - 1 downto 0);
    udiv_fu_664_p3 <= (select_ln130_reg_779 & ap_const_lv2_0);
    zext_ln127_1_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln127_1_fu_306_p3),2048));
    zext_ln127_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_224_p3),64));
    zext_ln131_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(edge_u_fu_323_p1),64));
    zext_ln132_1_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln132_3_fu_505_p2),128));
    zext_ln132_2_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln132_reg_784),128));
    zext_ln132_3_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln132_5_fu_626_p3),128));
    zext_ln132_4_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln132_4_fu_579_p3),128));
    zext_ln132_5_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln132_5_fu_587_p2),128));
    zext_ln132_6_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udiv_fu_664_p3),16));
    zext_ln132_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln132_2_fu_497_p3),128));
end behav;
