// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GIN_compute_graphs_load_graph_Pipeline_VITIS_LOOP_145_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        num_of_nodes,
        neighbor_tables_offsets_3_address0,
        neighbor_tables_offsets_3_ce0,
        neighbor_tables_offsets_3_we0,
        neighbor_tables_offsets_3_d0,
        neighbor_tables_offsets_2_address0,
        neighbor_tables_offsets_2_ce0,
        neighbor_tables_offsets_2_we0,
        neighbor_tables_offsets_2_d0,
        neighbor_tables_offsets_1_address0,
        neighbor_tables_offsets_1_ce0,
        neighbor_tables_offsets_1_we0,
        neighbor_tables_offsets_1_d0,
        neighbor_table_offsets_address0,
        neighbor_table_offsets_ce0,
        neighbor_table_offsets_we0,
        neighbor_table_offsets_d0,
        full_pe_degree_tables_address0,
        full_pe_degree_tables_ce0,
        full_pe_degree_tables_q0,
        neighbor_tables_offsets_0_address0,
        neighbor_tables_offsets_0_ce0,
        neighbor_tables_offsets_0_we0,
        neighbor_tables_offsets_0_d0,
        p_out,
        p_out_ap_vld,
        p_out1,
        p_out1_ap_vld,
        p_out2,
        p_out2_ap_vld,
        p_out3,
        p_out3_ap_vld,
        pes_per_node_address0,
        pes_per_node_ce0,
        pes_per_node_we0,
        pes_per_node_d0,
        pes_per_node_address1,
        pes_per_node_ce1,
        pes_per_node_q1,
        degree_table_1_address0,
        degree_table_1_ce0,
        degree_table_1_q0,
        degree_tables_1_0_address0,
        degree_tables_1_0_ce0,
        degree_tables_1_0_we0,
        degree_tables_1_0_d0,
        degree_tables_1_1_address0,
        degree_tables_1_1_ce0,
        degree_tables_1_1_we0,
        degree_tables_1_1_d0,
        degree_tables_1_2_address0,
        degree_tables_1_2_ce0,
        degree_tables_1_2_we0,
        degree_tables_1_2_d0,
        degree_tables_1_3_address0,
        degree_tables_1_3_ce0,
        degree_tables_1_3_we0,
        degree_tables_1_3_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [30:0] num_of_nodes;
output  [8:0] neighbor_tables_offsets_3_address0;
output   neighbor_tables_offsets_3_ce0;
output   neighbor_tables_offsets_3_we0;
output  [31:0] neighbor_tables_offsets_3_d0;
output  [8:0] neighbor_tables_offsets_2_address0;
output   neighbor_tables_offsets_2_ce0;
output   neighbor_tables_offsets_2_we0;
output  [31:0] neighbor_tables_offsets_2_d0;
output  [8:0] neighbor_tables_offsets_1_address0;
output   neighbor_tables_offsets_1_ce0;
output   neighbor_tables_offsets_1_we0;
output  [31:0] neighbor_tables_offsets_1_d0;
output  [8:0] neighbor_table_offsets_address0;
output   neighbor_table_offsets_ce0;
output   neighbor_table_offsets_we0;
output  [31:0] neighbor_table_offsets_d0;
output  [8:0] full_pe_degree_tables_address0;
output   full_pe_degree_tables_ce0;
input  [127:0] full_pe_degree_tables_q0;
output  [8:0] neighbor_tables_offsets_0_address0;
output   neighbor_tables_offsets_0_ce0;
output   neighbor_tables_offsets_0_we0;
output  [31:0] neighbor_tables_offsets_0_d0;
output  [31:0] p_out;
output   p_out_ap_vld;
output  [31:0] p_out1;
output   p_out1_ap_vld;
output  [31:0] p_out2;
output   p_out2_ap_vld;
output  [31:0] p_out3;
output   p_out3_ap_vld;
output  [7:0] pes_per_node_address0;
output   pes_per_node_ce0;
output   pes_per_node_we0;
output  [7:0] pes_per_node_d0;
output  [7:0] pes_per_node_address1;
output   pes_per_node_ce1;
input  [7:0] pes_per_node_q1;
output  [8:0] degree_table_1_address0;
output   degree_table_1_ce0;
input  [31:0] degree_table_1_q0;
output  [8:0] degree_tables_1_0_address0;
output   degree_tables_1_0_ce0;
output   degree_tables_1_0_we0;
output  [63:0] degree_tables_1_0_d0;
output  [8:0] degree_tables_1_1_address0;
output   degree_tables_1_1_ce0;
output   degree_tables_1_1_we0;
output  [63:0] degree_tables_1_1_d0;
output  [8:0] degree_tables_1_2_address0;
output   degree_tables_1_2_ce0;
output   degree_tables_1_2_we0;
output  [63:0] degree_tables_1_2_d0;
output  [8:0] degree_tables_1_3_address0;
output   degree_tables_1_3_ce0;
output   degree_tables_1_3_we0;
output  [63:0] degree_tables_1_3_d0;

reg ap_idle;
reg neighbor_tables_offsets_3_ce0;
reg neighbor_tables_offsets_3_we0;
reg neighbor_tables_offsets_2_ce0;
reg neighbor_tables_offsets_2_we0;
reg neighbor_tables_offsets_1_ce0;
reg neighbor_tables_offsets_1_we0;
reg neighbor_table_offsets_ce0;
reg neighbor_table_offsets_we0;
reg full_pe_degree_tables_ce0;
reg neighbor_tables_offsets_0_ce0;
reg neighbor_tables_offsets_0_we0;
reg p_out_ap_vld;
reg p_out1_ap_vld;
reg p_out2_ap_vld;
reg p_out3_ap_vld;
reg pes_per_node_ce0;
reg pes_per_node_we0;
reg pes_per_node_ce1;
reg degree_table_1_ce0;
reg degree_tables_1_0_ce0;
reg degree_tables_1_0_we0;
reg degree_tables_1_1_ce0;
reg degree_tables_1_1_we0;
reg degree_tables_1_2_ce0;
reg degree_tables_1_2_we0;
reg degree_tables_1_3_ce0;
reg degree_tables_1_3_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln145_fu_454_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [30:0] i_reg_1049;
reg   [30:0] i_reg_1049_pp0_iter1_reg;
reg   [0:0] icmp_ln145_reg_1056;
reg   [0:0] icmp_ln145_reg_1056_pp0_iter1_reg;
reg   [0:0] icmp_ln145_reg_1056_pp0_iter2_reg;
wire   [63:0] i_3_cast104_fu_466_p1;
reg   [63:0] i_3_cast104_reg_1060;
reg   [63:0] i_3_cast104_reg_1060_pp0_iter1_reg;
reg   [31:0] degree_reg_1079;
wire   [31:0] degree_j_fu_477_p1;
reg   [31:0] degree_j_reg_1084;
wire   [0:0] icmp_ln160_fu_481_p2;
reg   [0:0] icmp_ln160_reg_1090;
reg   [31:0] degree_j_1_reg_1094;
reg   [31:0] degree_j_2_reg_1101;
reg   [31:0] degree_j_3_reg_1108;
wire   [0:0] icmp_ln160_1_fu_579_p2;
wire   [2:0] zext_ln137_1_fu_624_p1;
wire   [0:0] icmp_ln160_2_fu_633_p2;
wire   [2:0] p_Result_432_fu_660_p3;
wire   [0:0] icmp_ln160_3_fu_682_p2;
reg   [0:0] icmp_ln160_3_reg_1133;
reg   [7:0] pes_per_node_addr_reg_1137;
wire   [0:0] addr_cmp_fu_731_p2;
reg   [0:0] addr_cmp_reg_1143;
wire   [0:0] trunc_ln168_fu_737_p1;
reg   [0:0] trunc_ln168_reg_1148;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [0:0] ap_phi_mux_node_pes_V_8_phi_fu_356_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_node_pes_V_8_reg_352;
reg   [0:0] ap_phi_reg_pp0_iter1_node_pes_V_8_reg_352;
reg   [0:0] ap_phi_reg_pp0_iter2_node_pes_V_8_reg_352;
reg   [1:0] ap_phi_mux_node_pes_V_7_phi_fu_367_p4;
wire   [1:0] p_Result_s_fu_606_p3;
wire   [1:0] ap_phi_reg_pp0_iter2_node_pes_V_7_reg_364;
wire   [1:0] zext_ln137_fu_569_p1;
wire   [2:0] ap_phi_reg_pp0_iter0_node_pes_V_6_reg_373;
reg   [2:0] ap_phi_reg_pp0_iter1_node_pes_V_6_reg_373;
reg   [2:0] ap_phi_reg_pp0_iter2_node_pes_V_6_reg_373;
reg   [2:0] ap_phi_reg_pp0_iter3_node_pes_V_6_reg_373;
reg   [3:0] ap_phi_mux_node_pes_V_5_phi_fu_385_p4;
wire   [3:0] p_Result_433_fu_775_p3;
wire   [3:0] ap_phi_reg_pp0_iter3_node_pes_V_5_reg_382;
wire   [3:0] zext_ln137_2_fu_770_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln163_fu_541_p1;
wire   [63:0] zext_ln163_1_fu_587_p1;
wire   [63:0] zext_ln163_2_fu_641_p1;
wire   [63:0] zext_ln163_3_fu_690_p1;
wire   [63:0] zext_ln168_fu_723_p1;
reg   [63:0] reuse_addr_reg_fu_110;
wire    ap_loop_init;
reg   [7:0] reuse_reg_fu_114;
wire   [7:0] or_ln168_fu_933_p2;
reg   [31:0] acc_fu_118;
wire   [31:0] acc_1_fu_528_p2;
reg   [31:0] empty_fu_122;
wire   [31:0] add_ln158_fu_533_p2;
reg   [31:0] empty_359_fu_126;
wire   [31:0] add_ln158_1_fu_574_p2;
reg   [31:0] empty_360_fu_130;
wire   [31:0] add_ln158_2_fu_628_p2;
reg   [31:0] empty_361_fu_134;
wire   [31:0] add_ln158_3_fu_677_p2;
reg   [30:0] i_3_fu_138;
reg   [30:0] ap_sig_allocacmp_i;
wire   [30:0] add_ln145_fu_460_p2;
reg   [31:0] pe_num_of_nodes_fu_142;
wire   [31:0] num_of_nodes_per_pe_fu_554_p2;
reg   [31:0] pe_num_of_nodes_1_fu_146;
wire   [31:0] num_of_nodes_per_pe_1_fu_600_p2;
reg   [31:0] pe_num_of_nodes_2_fu_150;
wire   [31:0] num_of_nodes_per_pe_2_fu_654_p2;
reg   [31:0] pe_num_of_nodes_3_fu_154;
wire   [31:0] num_of_nodes_per_pe_3_fu_703_p2;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] i_3_cast_fu_517_p1;
wire   [7:0] lshr_ln_fu_714_p4;
wire   [2:0] shl_ln7_fu_794_p3;
wire   [2:0] empty_362_fu_801_p2;
wire   [3:0] zext_ln168_1_fu_813_p1;
wire   [0:0] icmp_ln168_fu_807_p2;
wire   [3:0] zext_ln168_2_fu_817_p1;
wire   [3:0] xor_ln168_fu_825_p2;
wire   [3:0] select_ln168_fu_831_p3;
wire   [3:0] select_ln168_2_fu_847_p3;
wire   [3:0] select_ln168_1_fu_839_p3;
wire   [3:0] xor_ln168_1_fu_855_p2;
wire   [7:0] zext_ln168_3_fu_821_p1;
wire   [7:0] zext_ln168_4_fu_861_p1;
wire   [7:0] shl_ln168_fu_873_p2;
reg   [7:0] tmp_fu_879_p4;
wire   [7:0] zext_ln168_5_fu_865_p1;
wire   [7:0] zext_ln168_6_fu_869_p1;
wire   [7:0] shl_ln168_1_fu_897_p2;
wire   [7:0] lshr_ln168_fu_903_p2;
wire   [7:0] and_ln168_fu_909_p2;
wire   [7:0] reuse_select_fu_787_p3;
wire   [7:0] xor_ln168_2_fu_915_p2;
wire   [7:0] select_ln168_3_fu_889_p3;
wire   [7:0] and_ln168_1_fu_921_p2;
wire   [7:0] and_ln168_2_fu_927_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_262;
reg    ap_condition_700;
reg    ap_condition_704;
reg    ap_condition_708;
reg    ap_condition_712;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

GIN_compute_graphs_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            acc_fu_118 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd0))) begin
            acc_fu_118 <= acc_1_fu_528_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_262)) begin
        if (((icmp_ln160_fu_481_p2 == 1'd1) & (icmp_ln145_reg_1056 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_node_pes_V_8_reg_352 <= 1'd1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_node_pes_V_8_reg_352 <= ap_phi_reg_pp0_iter1_node_pes_V_8_reg_352;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln160_2_fu_633_p2 == 1'd0) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_node_pes_V_6_reg_373 <= zext_ln137_1_fu_624_p1;
        end else if (((icmp_ln160_2_fu_633_p2 == 1'd1) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_node_pes_V_6_reg_373 <= p_Result_432_fu_660_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_node_pes_V_6_reg_373 <= ap_phi_reg_pp0_iter2_node_pes_V_6_reg_373;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_359_fu_126 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd0))) begin
            empty_359_fu_126 <= add_ln158_1_fu_574_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_360_fu_130 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd0))) begin
            empty_360_fu_130 <= add_ln158_2_fu_628_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_361_fu_134 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd0))) begin
            empty_361_fu_134 <= add_ln158_3_fu_677_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_fu_122 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd0))) begin
            empty_fu_122 <= add_ln158_fu_533_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln145_fu_454_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_3_fu_138 <= add_ln145_fu_460_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_3_fu_138 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            pe_num_of_nodes_1_fu_146 <= 32'd0;
        end else if ((1'b1 == ap_condition_700)) begin
            pe_num_of_nodes_1_fu_146 <= num_of_nodes_per_pe_1_fu_600_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            pe_num_of_nodes_2_fu_150 <= 32'd0;
        end else if ((1'b1 == ap_condition_704)) begin
            pe_num_of_nodes_2_fu_150 <= num_of_nodes_per_pe_2_fu_654_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            pe_num_of_nodes_3_fu_154 <= 32'd0;
        end else if ((1'b1 == ap_condition_708)) begin
            pe_num_of_nodes_3_fu_154 <= num_of_nodes_per_pe_3_fu_703_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            pe_num_of_nodes_fu_142 <= 32'd0;
        end else if ((1'b1 == ap_condition_712)) begin
            pe_num_of_nodes_fu_142 <= num_of_nodes_per_pe_fu_554_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_addr_reg_fu_110 <= 64'd18446744073709551615;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd0))) begin
            reuse_addr_reg_fu_110 <= zext_ln168_fu_723_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg_fu_114 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            reuse_reg_fu_114 <= or_ln168_fu_933_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd0))) begin
        addr_cmp_reg_1143 <= addr_cmp_fu_731_p2;
        icmp_ln160_3_reg_1133 <= icmp_ln160_3_fu_682_p2;
        pes_per_node_addr_reg_1137 <= zext_ln168_fu_723_p1;
        trunc_ln168_reg_1148 <= trunc_ln168_fu_737_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_3_cast104_reg_1060_pp0_iter1_reg[30 : 0] <= i_3_cast104_reg_1060[30 : 0];
        i_reg_1049 <= ap_sig_allocacmp_i;
        i_reg_1049_pp0_iter1_reg <= i_reg_1049;
        icmp_ln145_reg_1056 <= icmp_ln145_fu_454_p2;
        icmp_ln145_reg_1056_pp0_iter1_reg <= icmp_ln145_reg_1056;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_node_pes_V_6_reg_373 <= ap_phi_reg_pp0_iter0_node_pes_V_6_reg_373;
        ap_phi_reg_pp0_iter1_node_pes_V_8_reg_352 <= ap_phi_reg_pp0_iter0_node_pes_V_8_reg_352;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_node_pes_V_6_reg_373 <= ap_phi_reg_pp0_iter1_node_pes_V_6_reg_373;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln145_reg_1056 == 1'd0))) begin
        degree_j_1_reg_1094 <= {{full_pe_degree_tables_q0[63:32]}};
        degree_j_2_reg_1101 <= {{full_pe_degree_tables_q0[95:64]}};
        degree_j_3_reg_1108 <= {{full_pe_degree_tables_q0[127:96]}};
        degree_j_reg_1084 <= degree_j_fu_477_p1;
        degree_reg_1079 <= degree_table_1_q0;
        icmp_ln160_reg_1090 <= icmp_ln160_fu_481_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln145_fu_454_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_3_cast104_reg_1060[30 : 0] <= i_3_cast104_fu_466_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln145_reg_1056_pp0_iter2_reg <= icmp_ln145_reg_1056_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((icmp_ln145_fu_454_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln145_reg_1056_pp0_iter2_reg == 1'd0)) begin
        if ((icmp_ln160_3_reg_1133 == 1'd0)) begin
            ap_phi_mux_node_pes_V_5_phi_fu_385_p4 = zext_ln137_2_fu_770_p1;
        end else if ((icmp_ln160_3_reg_1133 == 1'd1)) begin
            ap_phi_mux_node_pes_V_5_phi_fu_385_p4 = p_Result_433_fu_775_p3;
        end else begin
            ap_phi_mux_node_pes_V_5_phi_fu_385_p4 = ap_phi_reg_pp0_iter3_node_pes_V_5_reg_382;
        end
    end else begin
        ap_phi_mux_node_pes_V_5_phi_fu_385_p4 = ap_phi_reg_pp0_iter3_node_pes_V_5_reg_382;
    end
end

always @ (*) begin
    if ((icmp_ln145_reg_1056_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln160_1_fu_579_p2 == 1'd0)) begin
            ap_phi_mux_node_pes_V_7_phi_fu_367_p4 = zext_ln137_fu_569_p1;
        end else if ((icmp_ln160_1_fu_579_p2 == 1'd1)) begin
            ap_phi_mux_node_pes_V_7_phi_fu_367_p4 = p_Result_s_fu_606_p3;
        end else begin
            ap_phi_mux_node_pes_V_7_phi_fu_367_p4 = ap_phi_reg_pp0_iter2_node_pes_V_7_reg_364;
        end
    end else begin
        ap_phi_mux_node_pes_V_7_phi_fu_367_p4 = ap_phi_reg_pp0_iter2_node_pes_V_7_reg_364;
    end
end

always @ (*) begin
    if (((icmp_ln160_reg_1090 == 1'd0) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_node_pes_V_8_phi_fu_356_p4 = 1'd0;
    end else begin
        ap_phi_mux_node_pes_V_8_phi_fu_356_p4 = ap_phi_reg_pp0_iter2_node_pes_V_8_reg_352;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 31'd0;
    end else begin
        ap_sig_allocacmp_i = i_3_fu_138;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        degree_table_1_ce0 = 1'b1;
    end else begin
        degree_table_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        degree_tables_1_0_ce0 = 1'b1;
    end else begin
        degree_tables_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln160_reg_1090 == 1'd1) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd0))) begin
        degree_tables_1_0_we0 = 1'b1;
    end else begin
        degree_tables_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        degree_tables_1_1_ce0 = 1'b1;
    end else begin
        degree_tables_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln160_1_fu_579_p2 == 1'd1) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd0))) begin
        degree_tables_1_1_we0 = 1'b1;
    end else begin
        degree_tables_1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        degree_tables_1_2_ce0 = 1'b1;
    end else begin
        degree_tables_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln160_2_fu_633_p2 == 1'd1) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd0))) begin
        degree_tables_1_2_we0 = 1'b1;
    end else begin
        degree_tables_1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        degree_tables_1_3_ce0 = 1'b1;
    end else begin
        degree_tables_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln160_3_fu_682_p2 == 1'd1) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd0))) begin
        degree_tables_1_3_we0 = 1'b1;
    end else begin
        degree_tables_1_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        full_pe_degree_tables_ce0 = 1'b1;
    end else begin
        full_pe_degree_tables_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        neighbor_table_offsets_ce0 = 1'b1;
    end else begin
        neighbor_table_offsets_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd0))) begin
        neighbor_table_offsets_we0 = 1'b1;
    end else begin
        neighbor_table_offsets_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        neighbor_tables_offsets_0_ce0 = 1'b1;
    end else begin
        neighbor_tables_offsets_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd0))) begin
        neighbor_tables_offsets_0_we0 = 1'b1;
    end else begin
        neighbor_tables_offsets_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        neighbor_tables_offsets_1_ce0 = 1'b1;
    end else begin
        neighbor_tables_offsets_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd0))) begin
        neighbor_tables_offsets_1_we0 = 1'b1;
    end else begin
        neighbor_tables_offsets_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        neighbor_tables_offsets_2_ce0 = 1'b1;
    end else begin
        neighbor_tables_offsets_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd0))) begin
        neighbor_tables_offsets_2_we0 = 1'b1;
    end else begin
        neighbor_tables_offsets_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        neighbor_tables_offsets_3_ce0 = 1'b1;
    end else begin
        neighbor_tables_offsets_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd0))) begin
        neighbor_tables_offsets_3_we0 = 1'b1;
    end else begin
        neighbor_tables_offsets_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd1))) begin
        p_out1_ap_vld = 1'b1;
    end else begin
        p_out1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd1))) begin
        p_out2_ap_vld = 1'b1;
    end else begin
        p_out2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd1))) begin
        p_out3_ap_vld = 1'b1;
    end else begin
        p_out3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd1))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        pes_per_node_ce0 = 1'b1;
    end else begin
        pes_per_node_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pes_per_node_ce1 = 1'b1;
    end else begin
        pes_per_node_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        pes_per_node_we0 = 1'b1;
    end else begin
        pes_per_node_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_fu_528_p2 = (degree_reg_1079 + acc_fu_118);

assign add_ln145_fu_460_p2 = (ap_sig_allocacmp_i + 31'd1);

assign add_ln158_1_fu_574_p2 = (degree_j_1_reg_1094 + empty_359_fu_126);

assign add_ln158_2_fu_628_p2 = (degree_j_2_reg_1101 + empty_360_fu_130);

assign add_ln158_3_fu_677_p2 = (degree_j_3_reg_1108 + empty_361_fu_134);

assign add_ln158_fu_533_p2 = (degree_j_reg_1084 + empty_fu_122);

assign addr_cmp_fu_731_p2 = ((reuse_addr_reg_fu_110 == zext_ln168_fu_723_p1) ? 1'b1 : 1'b0);

assign and_ln168_1_fu_921_p2 = (xor_ln168_2_fu_915_p2 & reuse_select_fu_787_p3);

assign and_ln168_2_fu_927_p2 = (select_ln168_3_fu_889_p3 & and_ln168_fu_909_p2);

assign and_ln168_fu_909_p2 = (shl_ln168_1_fu_897_p2 & lshr_ln168_fu_903_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_262 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_700 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln160_1_fu_579_p2 == 1'd1) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_condition_704 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln160_2_fu_633_p2 == 1'd1) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_condition_708 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln160_3_fu_682_p2 == 1'd1) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_condition_712 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln160_reg_1090 == 1'd1) & (icmp_ln145_reg_1056_pp0_iter1_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_node_pes_V_6_reg_373 = 'bx;

assign ap_phi_reg_pp0_iter0_node_pes_V_8_reg_352 = 'bx;

assign ap_phi_reg_pp0_iter2_node_pes_V_7_reg_364 = 'bx;

assign ap_phi_reg_pp0_iter3_node_pes_V_5_reg_382 = 'bx;

assign degree_j_fu_477_p1 = full_pe_degree_tables_q0[31:0];

assign degree_table_1_address0 = i_3_cast104_fu_466_p1;

assign degree_tables_1_0_address0 = zext_ln163_fu_541_p1;

assign degree_tables_1_0_d0 = {{degree_j_reg_1084}, {i_3_cast_fu_517_p1}};

assign degree_tables_1_1_address0 = zext_ln163_1_fu_587_p1;

assign degree_tables_1_1_d0 = {{degree_j_1_reg_1094}, {i_3_cast_fu_517_p1}};

assign degree_tables_1_2_address0 = zext_ln163_2_fu_641_p1;

assign degree_tables_1_2_d0 = {{degree_j_2_reg_1101}, {i_3_cast_fu_517_p1}};

assign degree_tables_1_3_address0 = zext_ln163_3_fu_690_p1;

assign degree_tables_1_3_d0 = {{degree_j_3_reg_1108}, {i_3_cast_fu_517_p1}};

assign empty_362_fu_801_p2 = (shl_ln7_fu_794_p3 | 3'd3);

assign full_pe_degree_tables_address0 = i_3_cast104_fu_466_p1;

assign i_3_cast104_fu_466_p1 = ap_sig_allocacmp_i;

assign i_3_cast_fu_517_p1 = i_reg_1049_pp0_iter1_reg;

assign icmp_ln145_fu_454_p2 = ((ap_sig_allocacmp_i == num_of_nodes) ? 1'b1 : 1'b0);

assign icmp_ln160_1_fu_579_p2 = (($signed(degree_j_1_reg_1094) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln160_2_fu_633_p2 = (($signed(degree_j_2_reg_1101) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln160_3_fu_682_p2 = (($signed(degree_j_3_reg_1108) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln160_fu_481_p2 = (($signed(degree_j_fu_477_p1) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln168_fu_807_p2 = ((shl_ln7_fu_794_p3 > empty_362_fu_801_p2) ? 1'b1 : 1'b0);

assign lshr_ln168_fu_903_p2 = 8'd255 >> zext_ln168_6_fu_869_p1;

assign lshr_ln_fu_714_p4 = {{i_reg_1049_pp0_iter1_reg[8:1]}};

assign neighbor_table_offsets_address0 = i_3_cast104_reg_1060_pp0_iter1_reg;

assign neighbor_table_offsets_d0 = acc_fu_118;

assign neighbor_tables_offsets_0_address0 = i_3_cast104_reg_1060_pp0_iter1_reg;

assign neighbor_tables_offsets_0_d0 = empty_fu_122;

assign neighbor_tables_offsets_1_address0 = i_3_cast104_reg_1060_pp0_iter1_reg;

assign neighbor_tables_offsets_1_d0 = empty_359_fu_126;

assign neighbor_tables_offsets_2_address0 = i_3_cast104_reg_1060_pp0_iter1_reg;

assign neighbor_tables_offsets_2_d0 = empty_360_fu_130;

assign neighbor_tables_offsets_3_address0 = i_3_cast104_reg_1060_pp0_iter1_reg;

assign neighbor_tables_offsets_3_d0 = empty_361_fu_134;

assign num_of_nodes_per_pe_1_fu_600_p2 = (pe_num_of_nodes_1_fu_146 + 32'd1);

assign num_of_nodes_per_pe_2_fu_654_p2 = (pe_num_of_nodes_2_fu_150 + 32'd1);

assign num_of_nodes_per_pe_3_fu_703_p2 = (pe_num_of_nodes_3_fu_154 + 32'd1);

assign num_of_nodes_per_pe_fu_554_p2 = (pe_num_of_nodes_fu_142 + 32'd1);

assign or_ln168_fu_933_p2 = (and_ln168_2_fu_927_p2 | and_ln168_1_fu_921_p2);

assign p_Result_432_fu_660_p3 = {{1'd1}, {ap_phi_mux_node_pes_V_7_phi_fu_367_p4}};

assign p_Result_433_fu_775_p3 = {{1'd1}, {ap_phi_reg_pp0_iter3_node_pes_V_6_reg_373}};

assign p_Result_s_fu_606_p3 = {{1'd1}, {ap_phi_mux_node_pes_V_8_phi_fu_356_p4}};

assign p_out = empty_361_fu_134;

assign p_out1 = empty_360_fu_130;

assign p_out2 = empty_359_fu_126;

assign p_out3 = empty_fu_122;

assign pes_per_node_address0 = pes_per_node_addr_reg_1137;

assign pes_per_node_address1 = zext_ln168_fu_723_p1;

assign pes_per_node_d0 = (and_ln168_2_fu_927_p2 | and_ln168_1_fu_921_p2);

assign reuse_select_fu_787_p3 = ((addr_cmp_reg_1143[0:0] == 1'b1) ? reuse_reg_fu_114 : pes_per_node_q1);

assign select_ln168_1_fu_839_p3 = ((icmp_ln168_fu_807_p2[0:0] == 1'b1) ? zext_ln168_2_fu_817_p1 : zext_ln168_1_fu_813_p1);

assign select_ln168_2_fu_847_p3 = ((icmp_ln168_fu_807_p2[0:0] == 1'b1) ? xor_ln168_fu_825_p2 : zext_ln168_1_fu_813_p1);

assign select_ln168_3_fu_889_p3 = ((icmp_ln168_fu_807_p2[0:0] == 1'b1) ? tmp_fu_879_p4 : shl_ln168_fu_873_p2);

assign select_ln168_fu_831_p3 = ((icmp_ln168_fu_807_p2[0:0] == 1'b1) ? zext_ln168_1_fu_813_p1 : zext_ln168_2_fu_817_p1);

assign shl_ln168_1_fu_897_p2 = 8'd255 << zext_ln168_5_fu_865_p1;

assign shl_ln168_fu_873_p2 = zext_ln168_3_fu_821_p1 << zext_ln168_4_fu_861_p1;

assign shl_ln7_fu_794_p3 = {{trunc_ln168_reg_1148}, {2'd0}};

integer ap_tvar_int_0;

always @ (shl_ln168_fu_873_p2) begin
    for (ap_tvar_int_0 = 8 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 7 - 0) begin
            tmp_fu_879_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_fu_879_p4[ap_tvar_int_0] = shl_ln168_fu_873_p2[7 - ap_tvar_int_0];
        end
    end
end

assign trunc_ln168_fu_737_p1 = i_reg_1049_pp0_iter1_reg[0:0];

assign xor_ln168_1_fu_855_p2 = (select_ln168_fu_831_p3 ^ 4'd7);

assign xor_ln168_2_fu_915_p2 = (8'd255 ^ and_ln168_fu_909_p2);

assign xor_ln168_fu_825_p2 = (zext_ln168_1_fu_813_p1 ^ 4'd7);

assign zext_ln137_1_fu_624_p1 = ap_phi_mux_node_pes_V_7_phi_fu_367_p4;

assign zext_ln137_2_fu_770_p1 = ap_phi_reg_pp0_iter3_node_pes_V_6_reg_373;

assign zext_ln137_fu_569_p1 = ap_phi_mux_node_pes_V_8_phi_fu_356_p4;

assign zext_ln163_1_fu_587_p1 = pe_num_of_nodes_1_fu_146;

assign zext_ln163_2_fu_641_p1 = pe_num_of_nodes_2_fu_150;

assign zext_ln163_3_fu_690_p1 = pe_num_of_nodes_3_fu_154;

assign zext_ln163_fu_541_p1 = pe_num_of_nodes_fu_142;

assign zext_ln168_1_fu_813_p1 = shl_ln7_fu_794_p3;

assign zext_ln168_2_fu_817_p1 = empty_362_fu_801_p2;

assign zext_ln168_3_fu_821_p1 = ap_phi_mux_node_pes_V_5_phi_fu_385_p4;

assign zext_ln168_4_fu_861_p1 = select_ln168_2_fu_847_p3;

assign zext_ln168_5_fu_865_p1 = select_ln168_1_fu_839_p3;

assign zext_ln168_6_fu_869_p1 = xor_ln168_1_fu_855_p2;

assign zext_ln168_fu_723_p1 = lshr_ln_fu_714_p4;

always @ (posedge ap_clk) begin
    i_3_cast104_reg_1060[63:31] <= 33'b000000000000000000000000000000000;
    i_3_cast104_reg_1060_pp0_iter1_reg[63:31] <= 33'b000000000000000000000000000000000;
end

endmodule //GIN_compute_graphs_load_graph_Pipeline_VITIS_LOOP_145_5
