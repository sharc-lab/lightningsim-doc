-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel is
port (
    out_r : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_r : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    out_r_ap_vld : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of kernel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel_kernel,hls_ip_2021_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=1.825000,HLS_SYN_LAT=65539,HLS_SYN_TPT=65539,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=430,HLS_SYN_LUT=287,HLS_VERSION=2021_1_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal producer_U0_ap_start : STD_LOGIC;
    signal producer_U0_ap_done : STD_LOGIC;
    signal producer_U0_ap_continue : STD_LOGIC;
    signal producer_U0_ap_idle : STD_LOGIC;
    signal producer_U0_ap_ready : STD_LOGIC;
    signal producer_U0_channel1_din : STD_LOGIC_VECTOR (255 downto 0);
    signal producer_U0_channel1_write : STD_LOGIC;
    signal producer_U0_start_out : STD_LOGIC;
    signal producer_U0_start_write : STD_LOGIC;
    signal consumer_U0_ap_start : STD_LOGIC;
    signal consumer_U0_ap_done : STD_LOGIC;
    signal consumer_U0_ap_continue : STD_LOGIC;
    signal consumer_U0_ap_idle : STD_LOGIC;
    signal consumer_U0_ap_ready : STD_LOGIC;
    signal consumer_U0_channel1_read : STD_LOGIC;
    signal consumer_U0_out_r : STD_LOGIC_VECTOR (31 downto 0);
    signal consumer_U0_out_r_ap_vld : STD_LOGIC;
    signal channel_full_n : STD_LOGIC;
    signal channel_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal channel_empty_n : STD_LOGIC;
    signal start_for_consumer_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_consumer_U0_full_n : STD_LOGIC;
    signal start_for_consumer_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_consumer_U0_empty_n : STD_LOGIC;

    component kernel_producer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        channel1_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        channel1_full_n : IN STD_LOGIC;
        channel1_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_r : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_consumer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        channel1_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        channel1_empty_n : IN STD_LOGIC;
        channel1_read : OUT STD_LOGIC;
        out_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r_ap_vld : OUT STD_LOGIC );
    end component;


    component kernel_fifo_w256_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (255 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (255 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel_start_for_consumer_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    producer_U0 : component kernel_producer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => producer_U0_ap_start,
        start_full_n => start_for_consumer_U0_full_n,
        ap_done => producer_U0_ap_done,
        ap_continue => producer_U0_ap_continue,
        ap_idle => producer_U0_ap_idle,
        ap_ready => producer_U0_ap_ready,
        channel1_din => producer_U0_channel1_din,
        channel1_full_n => channel_full_n,
        channel1_write => producer_U0_channel1_write,
        start_out => producer_U0_start_out,
        start_write => producer_U0_start_write,
        in_r => in_r);

    consumer_U0 : component kernel_consumer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => consumer_U0_ap_start,
        ap_done => consumer_U0_ap_done,
        ap_continue => consumer_U0_ap_continue,
        ap_idle => consumer_U0_ap_idle,
        ap_ready => consumer_U0_ap_ready,
        channel1_dout => channel_dout,
        channel1_empty_n => channel_empty_n,
        channel1_read => consumer_U0_channel1_read,
        out_r => consumer_U0_out_r,
        out_r_ap_vld => consumer_U0_out_r_ap_vld);

    channel_U : component kernel_fifo_w256_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => producer_U0_channel1_din,
        if_full_n => channel_full_n,
        if_write => producer_U0_channel1_write,
        if_dout => channel_dout,
        if_empty_n => channel_empty_n,
        if_read => consumer_U0_channel1_read);

    start_for_consumer_U0_U : component kernel_start_for_consumer_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_consumer_U0_din,
        if_full_n => start_for_consumer_U0_full_n,
        if_write => producer_U0_start_write,
        if_dout => start_for_consumer_U0_dout,
        if_empty_n => start_for_consumer_U0_empty_n,
        if_read => consumer_U0_ap_ready);




    ap_done <= consumer_U0_ap_done;
    ap_idle <= (producer_U0_ap_idle and consumer_U0_ap_idle);
    ap_ready <= producer_U0_ap_ready;
    consumer_U0_ap_continue <= ap_const_logic_1;
    consumer_U0_ap_start <= start_for_consumer_U0_empty_n;
    out_r <= consumer_U0_out_r;
    out_r_ap_vld <= consumer_U0_out_r_ap_vld;
    producer_U0_ap_continue <= ap_const_logic_1;
    producer_U0_ap_start <= ap_start;
    start_for_consumer_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
